"use strict";(self.webpackChunkdocusaurus_blog=self.webpackChunkdocusaurus_blog||[]).push([[1020],{7547:(a,n,e)=>{e.r(n),e.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>k,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var i=e(7462),t=(e(7294),e(3905)),r=e(8607),m=e(9960);const l={slug:"formik-library-ajaib-untuk-memproses-form",title:"Formik: Library ajaib untuk memproses form dengan mudah",authors:["irul"],tags:["Frontend Development","Beginner Frontend","ReactJS"],date:"2021-05-11T11:00"},o=void 0,s={permalink:"/formik-library-ajaib-untuk-memproses-form",source:"@site/blog/2023-01-21-007-formik-library-ajaib-untuk-memproses-form.mdx",title:"Formik: Library ajaib untuk memproses form dengan mudah",description:"",date:"2021-05-11T11:00:00.000Z",formattedDate:"11 Mei 2021",tags:[{label:"Frontend Development",permalink:"/tags/frontend-development"},{label:"Beginner Frontend",permalink:"/tags/beginner-frontend"},{label:"ReactJS",permalink:"/tags/react-js"}],readingTime:3.73,hasTruncateMarker:!0,authors:[{name:"Irul",title:"JavaScript Enthusiast",url:"https://github.com/fulsep",imageURL:"https://github.com/fulsep.png",key:"irul"}],frontMatter:{slug:"formik-library-ajaib-untuk-memproses-form",title:"Formik: Library ajaib untuk memproses form dengan mudah",authors:["irul"],tags:["Frontend Development","Beginner Frontend","ReactJS"],date:"2021-05-11T11:00"},nextItem:{title:"Form Processing Pada ReactJS",permalink:"/form-processing-pada-reactjs"}},d={authorsImageUrls:[void 0]},u=[{value:"Instalasi",id:"instalasi",level:2},{value:"Contoh kode",id:"contoh-kode",level:2},{value:"Tanpa validasi",id:"tanpa-validasi",level:3},{value:"Dengan validasi",id:"dengan-validasi",level:3},{value:"Penjelasan lebih jauh tentang yup",id:"penjelasan-lebih-jauh-tentang-yup",level:3}],p={toc:u};function k(a){let{components:n,...e}=a;return(0,t.kt)("wrapper",(0,i.Z)({},p,e,{components:n,mdxType:"MDXLayout"}),(0,t.kt)(r.Z,{src:"/img/blog/forms.png",alt:"forms",mdxType:"ImageCenterize"}),(0,t.kt)("p",null,"Mengingat dari ",(0,t.kt)(m.Z,{to:"/form-processing-pada-reactjs",mdxType:"Link"},"tulisan sebelumnya")," kita dapat memproses form dengan berbagai macam cara, ada cara yang lebih mudah lagi untuk memproses sebuah form yakni dengan menggunakan ",(0,t.kt)(m.Z,{to:"https://formik.org/",mdxType:"Link"},"Formik"),"."),(0,t.kt)("h2",{id:"instalasi"},"Instalasi"),(0,t.kt)("p",null,"Untuk memproses form di contoh pertama dengan menggunakan Formik, kita perlu menginstal library Formik terlebih dahulu dengan perintah ",(0,t.kt)("inlineCode",{parentName:"p"},"npm install formik"),". Kemudian, kita dapat mengimpor Formik dan menggunakannya dalam komponen kita sebagai berikut:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"Pertama-tama, kita perlu meng-wrap komponen form kita dengan ",(0,t.kt)("inlineCode",{parentName:"li"},"<Formik>")," dan menambahkan props initialValues yang berisi objek dengan nama-nama field form sebagai properti dan nilai awal sebagai nilai dari properti tersebut."),(0,t.kt)("li",{parentName:"ol"},"Selanjutnya, kita perlu menggunakan ",(0,t.kt)("inlineCode",{parentName:"li"},"<Field>")," untuk setiap input dalam form kita. ",(0,t.kt)("inlineCode",{parentName:"li"},"<Field>")," akan menerima props name yang sesuai dengan nama field yang ditentukan dalam initialValues, dan component yang akan digunakan untuk menampilkan input."),(0,t.kt)("li",{parentName:"ol"},"kita juga perlu menambahkan event handler onSubmit pada ",(0,t.kt)("inlineCode",{parentName:"li"},"<form>")," yang akan digunakan untuk menangani submit form. Fungsi ini akan menerima satu argumen yang berisi objek dengan properti-properti yang sesuai dengan nama field form."),(0,t.kt)("li",{parentName:"ol"},"kita juga dapat menambahkan validasi pada form dengan menambahkan prop validationSchema pada ",(0,t.kt)("inlineCode",{parentName:"li"},"<Formik>")," dan membuat objek yup yang akan digunakan untuk validasi."),(0,t.kt)("li",{parentName:"ol"},"kita juga dapat menambahkan error handling, loading state dan lainnya dengan menambahkan beberapa props pada ",(0,t.kt)("inlineCode",{parentName:"li"},"<Formik>")),(0,t.kt)("li",{parentName:"ol"},"Sekarang, kita dapat mengakses nilai form dan menangani event form dengan lebih mudah menggunakan Formik.")),(0,t.kt)("h2",{id:"contoh-kode"},"Contoh kode"),(0,t.kt)("h3",{id:"tanpa-validasi"},"Tanpa validasi"),(0,t.kt)("p",null,"Berikut contoh kode formik tanpa valudasi:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { Formik, Form, Field } from 'formik';\n\nconst LoginForm = () => {\n\n  const handleSubmit = (values, { setSubmitting }) => {\n    console.log('Email:', values.email);\n    console.log('Password:', values.password);\n    setSubmitting(false);\n    // Tulis kode lainnya disini, seperti mengirimkan request menggunakan axios\n  };\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <label>\n            Email:\n            <Field type=\"email\" name=\"email\" />\n          </label>\n          <br />\n          <label>\n            Password:\n            <Field type=\"password\" name=\"password\" />\n          </label>\n          <br />\n          <button type=\"submit\" disabled={isSubmitting}>\n            Login\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default LoginForm;\n")),(0,t.kt)("h3",{id:"dengan-validasi"},"Dengan validasi"),(0,t.kt)("p",null,"Validasi juga bisa dilakukan dengan menambahkan package yup dengan perintah ",(0,t.kt)("inlineCode",{parentName:"p"},"npm install yup"),". Kemudian, kita dapat mengimpor yup dan membuat schema di dalam komponen, contoh kodenya sebagai berikut:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nconst LoginForm = () => {\n  const validationSchema = Yup.object().shape({\n    email: Yup.string()\n      .email('Invalid email address')\n      .required('Email is required'),\n    password: Yup.string()\n      .min(8, 'Password must be at least 8 characters')\n      .required('Password is required'),\n  });\n\n  const handleSubmit = (values, { setSubmitting }) => {\n    console.log('Email:', values.email);\n    console.log('Password:', values.password);\n    setSubmitting(false);\n    // Tulis kode lainnya disini, seperti mengirimkan request menggunakan axios\n  };\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <label>\n            Email:\n            <Field type=\"email\" name=\"email\" />\n            <ErrorMessage name=\"email\" component=\"div\" />\n          </label>\n          <br />\n          <label>\n            Password:\n            <Field type=\"password\" name=\"password\" />\n            <ErrorMessage name=\"password\" component=\"div\" />\n          </label>\n          <br />\n          <button type=\"submit\" disabled={isSubmitting}>\n            Login\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default LoginForm;\n")),(0,t.kt)("p",null,"Pada contoh di atas, form di-wrap oleh komponen ",(0,t.kt)("inlineCode",{parentName:"p"},"<Formik>"),", dan nilai awal dari field form diteruskan sebagai props initialValues. Skema validasi ditentukan menggunakan library Yup dan diteruskan sebagai props validationSchema. Fungsi handleSubmit diteruskan sebagai props onSubmit dan akan dipanggil saat form dikirim, dengan nilai form dan props tambahan seperti setSubmitting."),(0,t.kt)("p",null,"Elemen form diganti dengan komponen ",(0,t.kt)("inlineCode",{parentName:"p"},"<Field>"),", yang menerima props name yang sesuai dengan nama field dalam objek initialValues dan props component untuk menampilkan input."),(0,t.kt)("p",null,"Kita juga dapat menambahkan error handling, state loading dan lainnya dengan menambahkan beberapa props pada ",(0,t.kt)("inlineCode",{parentName:"p"},"<Formik>"),"."),(0,t.kt)("p",null,"Pastikan untuk meng-import Formik, Yup dan library lain yang diperlukan pada file yang digunakan."),(0,t.kt)("h3",{id:"penjelasan-lebih-jauh-tentang-yup"},"Penjelasan lebih jauh tentang yup"),(0,t.kt)("p",null,"Pada contoh kode di atas, objek validationSchema didefinisikan menggunakan library Yup."),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"Yup.object().shape({...})")," digunakan untuk membuat objek yang akan digunakan untuk validasi. Dengan shape, kita dapat menentukan properti-properti yang harus divalidasi pada objek tersebut."),(0,t.kt)("p",null,"Didalam objek tersebut, properti email di deklarasikan sebagai string yang harus sesuai dengan format email dengan menggunakan ",(0,t.kt)("inlineCode",{parentName:"p"},".email()"),' . Jika tidak sesuai dengan format email maka akan mengeluarkan pesan error "Invalid email address" dan harus diisi dengan menggunakan ',(0,t.kt)("inlineCode",{parentName:"p"},".required('Email is required')"),"."),(0,t.kt)("p",null,"Sedangkan untuk properti password di deklarasikan sebagai string yang harus lebih dari 8 karakter dengan menggunakan ",(0,t.kt)("inlineCode",{parentName:"p"},".min(8, 'Password must be at least 8 characters')")," dan harus diisi dengan menggunakan ",(0,t.kt)("inlineCode",{parentName:"p"},".required('Password is required')")),(0,t.kt)("p",null,"Secara keseluruhan, objek validationSchema ini digunakan untuk memvalidasi input dari form yang diterima oleh Formik dan memberikan feedback error sesuai dengan kondisi yang ditentukan."),(0,t.kt)("p",null,"Semoga Bermanfaat!"))}k.isMDXComponent=!0}}]);