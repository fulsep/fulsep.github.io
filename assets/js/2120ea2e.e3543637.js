"use strict";(self.webpackChunkdocusaurus_blog=self.webpackChunkdocusaurus_blog||[]).push([[973],{9556:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>u,default:()=>g,frontMatter:()=>i,metadata:()=>m,toc:()=>o});var t=n(7462),l=(n(7294),n(3905)),r=n(8607);n(9960);const i={slug:"terlalu-banyak-state-atasi-dengan-ini",title:"Terlalu Banyak State? Atasi Dengan Ini!",authors:["irul"],tags:["Frontend Development","ReactJS"],date:"2021-05-08T11:00"},u=void 0,m={permalink:"/terlalu-banyak-state-atasi-dengan-ini",source:"@site/blog/2023-01-21-004-terlalu-banyak-state-atasi-dengan-ini.mdx",title:"Terlalu Banyak State? Atasi Dengan Ini!",description:"",date:"2021-05-08T11:00:00.000Z",formattedDate:"8 Mei 2021",tags:[{label:"Frontend Development",permalink:"/tags/frontend-development"},{label:"ReactJS",permalink:"/tags/react-js"}],readingTime:2.29,hasTruncateMarker:!0,authors:[{name:"Irul",title:"JavaScript Enthusiast",url:"https://github.com/fulsep",imageURL:"https://github.com/fulsep.png",key:"irul"}],frontMatter:{slug:"terlalu-banyak-state-atasi-dengan-ini",title:"Terlalu Banyak State? Atasi Dengan Ini!",authors:["irul"],tags:["Frontend Development","ReactJS"],date:"2021-05-08T11:00"},prevItem:{title:"Arrow Function: Hal yang harus kamu tahu!",permalink:"/hal-yang-harus-diketahui-tentang-arrow-function"},nextItem:{title:"Upload file dengan ReactJS dan axios",permalink:"/upload-file-dengan-reactjs-dan-axios"}},s={authorsImageUrls:[void 0]},o=[],p={toc:o};function g(e){let{components:a,...n}=e;return(0,l.kt)("wrapper",(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,l.kt)(r.Z,{src:"/img/blog/nodata.png",alt:"nodata",mdxType:"ImageCenterize"}),(0,l.kt)("p",null,"Pada saat kita membuat sebuah form di ReactJS, pastinya kita harus menyimpan setiap data dari user input, benar? Tapi sayangnya kebanyakan dari kita mengimplementasikan kode untuk 1 input 1 state seperti berikut:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, { useState } from 'react';\n\nfunction Form() {\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [email, setEmail] = useState('');\n\n  return (\n    <form>\n      <label>\n        First Name:\n        <input type=\"text\" value={firstName} onChange={e => setFirstName(e.target.value)} />\n      </label>\n      <br />\n      <label>\n        Last Name:\n        <input type=\"text\" value={lastName} onChange={e => setLastName(e.target.value)} />\n      </label>\n      <br />\n      <label>\n        Phone Number:\n        <input type=\"text\" value={phoneNumber} onChange={e => setPhoneNumber(e.target.value)} />\n      </label>\n      <br />\n      <label>\n        Email:\n        <input type=\"email\" value={email} onChange={e => setEmail(e.target.value)} />\n      </label>\n      <br />\n    </form>\n  );\n}\n\nexport default Form;\n")),(0,l.kt)("p",null,"Kode diatas bisa kita per-simple dengan menggunakan 1 state saja, berikut contohnya:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'import React, { useState } from \'react\';\n\nfunction Form() {\n  const [formData, setFormData] = useState({\n    firstName: \'\',\n    lastName: \'\',\n    phoneNumber: \'\',\n    email: \'\'\'\n  });\n\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  }\n\n  return (\n    <form>\n      <label>\n        First Name:\n        <input type="text" name="firstName" value={formData.firstName} onChange={handleChange} />\n      </label>\n      <br />\n      <label>\n        Last Name:\n        <input type="text" name="lastName" value={formData.lastName} onChange={handleChange} />\n      </label>\n      <br />\n      <label>\n        Phone Number:\n        <input type="text" name="phoneNumber" value={formData.phoneNumber} onChange={handleChange} />\n      </label>\n      <br />\n      <label>\n        Email:\n        <input type="email" name="email" value={formData.email} onChange={handleChange} />\n      </label>\n      <br />\n    </form>\n  );\n}\n\nexport default Form;\n')),(0,l.kt)("p",null,"Atau kita juga bisa menggunakan hook useReducer dari React untuk handling form"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'import React, { useReducer } from \'react\';\n\nconst initialState = {\n  firstName: \'\',\n  lastName: \'\',\n  phoneNumber: \'\',\n  email: \'\'\n};\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \'UPDATE_FIELD\':\n      return { ...state, [action.field]: action.value };\n    default:\n      return state;\n  }\n};\n\nfunction Form() {\n  const [formData, dispatch] = useReducer(formReducer, initialState);\n\n  const handleChange = e => {\n    dispatch({\n      type: \'UPDATE_FIELD\',\n      field: e.target.name,\n      value: e.target.value\n    });\n  }\n\n  return (\n    <form>\n      <label>\n        First Name:\n        <input type="text" name="firstName" value={formData.firstName} onChange={handleChange} />\n      </label>\n      <br />\n      <label>\n        Last Name:\n        <input type="text" name="lastName" value={formData.lastName} onChange={handleChange} />\n      </label>\n      <br />\n      <label>\n        Phone Number:\n        <input type="text" name="phoneNumber" value={formData.phoneNumber} onChange={handleChange} />\n      </label>\n      <br />\n      <label>\n        Email:\n        <input type="email" name="email" value={formData.email} onChange={handleChange} />\n      </label>\n      <br />\n    </form>\n  );\n}\n\nexport default Form;\n')),(0,l.kt)("p",null,"Di atas, kita menggunakan useReducer untuk mengelola data form. Kita membuat sebuah objek state awal yang berisi properti untuk masing-masing input field. Selanjutnya, kita membuat sebuah fungsi reducer yang digunakan untuk memperbarui state sesuai dengan tipe aksi yang diterima."),(0,l.kt)("p",null,"Ketika pengguna mengetik di salah satu input field, fungsi handleChange dipanggil dan mengirimkan aksi dengan tipe UPDATE_FIELD, nama field dan nilai sebagai properti. Fungsi reducer kemudian menggunakan nama field untuk memperbarui properti yang sesuai dalam objek state."),(0,l.kt)("p",null,"Semoga Bermanfaat!"))}g.isMDXComponent=!0}}]);