"use strict";(self.webpackChunkdocusaurus_blog=self.webpackChunkdocusaurus_blog||[]).push([[2395],{9657:(n,a,e)=>{e.r(a),e.d(a,{assets:()=>l,contentTitle:()=>p,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>r});var t=e(7462),i=(e(7294),e(3905)),o=e(8607);e(9960);const s={slug:"apa-itu-state-pada-react-component",title:"Apa itu State pada React Component?",authors:["irul"],tags:["Frontend Development","Beginner Frontend","ReactJS"],date:"2021-05-05T11:00"},p=void 0,u={permalink:"/apa-itu-state-pada-react-component",source:"@site/blog/2023-01-21-001-apa-itu-state-pada-react-component.mdx",title:"Apa itu State pada React Component?",description:"",date:"2021-05-05T11:00:00.000Z",formattedDate:"5 Mei 2021",tags:[{label:"Frontend Development",permalink:"/tags/frontend-development"},{label:"Beginner Frontend",permalink:"/tags/beginner-frontend"},{label:"ReactJS",permalink:"/tags/react-js"}],readingTime:5.16,hasTruncateMarker:!0,authors:[{name:"Irul",title:"JavaScript Enthusiast",url:"https://github.com/fulsep",imageURL:"https://github.com/fulsep.png",key:"irul"}],frontMatter:{slug:"apa-itu-state-pada-react-component",title:"Apa itu State pada React Component?",authors:["irul"],tags:["Frontend Development","Beginner Frontend","ReactJS"],date:"2021-05-05T11:00"},prevItem:{title:"React Lifecycle: Class Component vs Functional Component",permalink:"/perbedaan-lifecycle-react-pada-class-component-dan-functional-component"},nextItem:{title:"Part 2 - Nodemailer dengan Gmail OAuth2",permalink:"/nodemailer-dengan-gmail-oauth2-2"}},l={authorsImageUrls:[void 0]},r=[{value:"Hal penting tentang React state",id:"hal-penting-tentang-react-state",level:2},{value:"Contoh implementasi React state",id:"contoh-implementasi-react-state",level:2},{value:"Menggunakan state pada komponen input",id:"menggunakan-state-pada-komponen-input",level:2},{value:"Menggunakan state untuk conditional rendering",id:"menggunakan-state-untuk-conditional-rendering",level:2},{value:"Menggunakan state untuk menyimpan data dari axios request",id:"menggunakan-state-untuk-menyimpan-data-dari-axios-request",level:2},{value:"Menggunakan async-await",id:"menggunakan-async-await",level:3}],d={toc:r};function m(n){let{components:a,...e}=n;return(0,i.kt)("wrapper",(0,t.Z)({},d,e,{components:a,mdxType:"MDXLayout"}),(0,i.kt)(o.Z,{src:"/img/blog/react.png",alt:"react",mdxType:"ImageCenterize"}),(0,i.kt)("p",null,"State adalah sebuah objek yang digunakan dalam komponen React untuk menyimpan data yang dapat diubah-ubah. State digunakan untuk mengontrol kondisi dan perilaku komponen dan dapat digunakan untuk mengubah tampilan komponen. State dapat diubah melalui fungsi ",(0,i.kt)("inlineCode",{parentName:"p"},"setState()")," yang disediakan oleh React, yang akan memicu render ulang komponen dengan state yang baru."),(0,i.kt)("h2",{id:"hal-penting-tentang-react-state"},"Hal penting tentang React state"),(0,i.kt)("p",null,"Ada beberapa hal yang perlu diketahui tentang state di React:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"State hanya dapat digunakan dalam komponen yang diturunkan dari React.Component."),(0,i.kt)("li",{parentName:"ol"},"State harus diinisialisasi saat komponen dibuat, biasanya dalam konstruktor komponen."),(0,i.kt)("li",{parentName:"ol"},"State tidak boleh diubah secara langsung, tetapi harus menggunakan fungsi ",(0,i.kt)("inlineCode",{parentName:"li"},"setState()")," yang disediakan oleh React."),(0,i.kt)("li",{parentName:"ol"},"Setiap kali state diubah, React akan menjalankan render ulang komponen untuk menampilkan perubahan."),(0,i.kt)("li",{parentName:"ol"},"State dapat digunakan untuk mengontrol perilaku komponen, seperti menampilkan atau menyembunyikan elemen, atau untuk menyimpan data yang diterima dari server."),(0,i.kt)("li",{parentName:"ol"},"State yang di-passing dari komponen parent ke komponen child melalui props. Namun, state yang di-passing dari child ke parent harus melalui callback function yang didefinisikan di parent.")),(0,i.kt)("h2",{id:"contoh-implementasi-react-state"},"Contoh implementasi React state"),(0,i.kt)("p",null,"Untuk membuat state di class component React, kita harus menggunakan konstruktor komponen untuk menginisialisasi state. Di dalam konstruktor, kita dapat menetapkan nilai awal state dengan menetapkan properti this.state dengan objek yang berisi data yang ingin kita simpan. Sebagai contoh:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n      message: "Hello"\n    };\n  }\n  // ...\n}\n')),(0,i.kt)("p",null,'Di atas adalah contoh komponen yang memiliki state yang diinisialisasi dengan properti count dengan nilai 0 dan message dengan nilai "Hello". Kita dapat mengakses state dari dalam komponen dengan menggunakan ',(0,i.kt)("inlineCode",{parentName:"p"},"this.state"),"."),(0,i.kt)("p",null,"Jika kita menginginkan class component menjadi functional component, kita dapat menggunakan hook ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," untuk membuat state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState } from 'react';\n\nfunction MyComponent(props) {\n  const [count, setCount] = useState(0);\n  const [message, setMessage] = useState(\"Hello\");\n  // ...\n}\n")),(0,i.kt)("p",null,'Di atas adalah contoh component yang memiliki state yang diinisialisasi dengan properti count dengan nilai 0 dan message dengan nilai "Hello" dengan menggunakan hook ',(0,i.kt)("inlineCode",{parentName:"p"},"useState"),"."),(0,i.kt)("h2",{id:"menggunakan-state-pada-komponen-input"},"Menggunakan state pada komponen input"),(0,i.kt)("p",null,"Untuk menggunakan state pada input komponen, kita harus menyimpan nilai input dalam state dan mengupdate state saat nilai input berubah."),(0,i.kt)("p",null,"Pada class component, kita dapat menggunakan onChange event pada input untuk mengupdate state saat nilai input berubah. Kita dapat mengatur properti value dari input ke ",(0,i.kt)("inlineCode",{parentName:"p"},"this.state.inputValue")," dan mengatur ",(0,i.kt)("inlineCode",{parentName:"p"},"onChange")," untuk menjalankan ",(0,i.kt)("inlineCode",{parentName:"p"},"this.handleChange")," yang akan memanggil ",(0,i.kt)("inlineCode",{parentName:"p"},"setState()")," untuk mengupdate state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'class MyInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: ""\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ inputValue: event.target.value });\n  }\n\n  render() {\n    return (\n      <input\n        value={this.state.inputValue}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n')),(0,i.kt)("p",null,"Pada functional component, kita dapat menggunakan hook ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," untuk menyimpan nilai input dalam state dan mengupdate state saat nilai input berubah. Kita dapat mengatur properti value dari input ke ",(0,i.kt)("inlineCode",{parentName:"p"},"inputValue")," dan mengatur ",(0,i.kt)("inlineCode",{parentName:"p"},"onChange")," untuk menjalankan ",(0,i.kt)("inlineCode",{parentName:"p"},"handleChange")," yang akan memanggil ",(0,i.kt)("inlineCode",{parentName:"p"},"setInputValue")," untuk mengupdate state."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState } from 'react';\n\nfunction MyInput() {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  function handleChange(event) {\n    setInputValue(event.target.value);\n  }\n\n  return (\n    <input\n      value={inputValue}\n      onChange={handleChange}\n    />\n  );\n}\n")),(0,i.kt)("h2",{id:"menggunakan-state-untuk-conditional-rendering"},"Menggunakan state untuk conditional rendering"),(0,i.kt)("p",null,"Kita dapat menggunakan state untuk mengontrol kondisi rendering pada komponen React. Misalnya, jika kita ingin menampilkan atau menyembunyikan elemen berdasarkan kondisi tertentu, kita dapat menggunakan state untuk menyimpan kondisi tersebut dan menggunakannya dalam logika pada ",(0,i.kt)("inlineCode",{parentName:"p"},"render()")," method untuk menentukan apa yang harus ditampilkan."),(0,i.kt)("p",null,"Pada class component, kita dapat menggunakan if-else statement atau ternary operator untuk mengontrol kondisi rendering. Sebagai contoh:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showMessage: true\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.showMessage ? <p>Hello</p> : null}\n      </div>\n    );\n  }\n}\n")),(0,i.kt)("p",null,"Pada contoh di atas, komponen akan menampilkan elemen ",(0,i.kt)("inlineCode",{parentName:"p"},"<p>Hello</p>")," jika ",(0,i.kt)("inlineCode",{parentName:"p"},"showMessage")," di state bernilai ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". Jika ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", maka tidak akan tampil apapun."),(0,i.kt)("p",null,"Pada functional component, kita dapat menggunakan if-statement atau ternary operator untuk mengontrol kondisi rendering. Sebagai contoh:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState } from 'react';\n\nfunction MyComponent() {\n  const [showMessage, setShowMessage] = useState(true);\n  return (\n    <div>\n      {showMessage ? <p>Hello</p> : null}\n    </div>\n  );\n}\n")),(0,i.kt)("h2",{id:"menggunakan-state-untuk-menyimpan-data-dari-axios-request"},"Menggunakan state untuk menyimpan data dari axios request"),(0,i.kt)("p",null,"Kita dapat menggunakan state untuk menyimpan data yang didapat dari request axios. Pertama, kita harus mengimpor library axios dan membuat request ke endpoint yang diinginkan."),(0,i.kt)("p",null,"Pada class component, kita dapat menggunakan lifecycle method ",(0,i.kt)("inlineCode",{parentName:"p"},"componentDidMount()")," untuk mengirim request dan mengupdate state dengan data yang didapat. Sebagai contoh:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import axios from 'axios';\n\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"https://your-api-endpoint.com/data\")\n    .then(response => {\n      this.setState({ data: response.data });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.data ? <p>Data: {this.state.data}</p> : <p>Loading...</p>}\n      </div>\n    );\n  }\n}\n")),(0,i.kt)("p",null,"Pada functional component, Anda dapat menggunakan hook useEffect untuk mengirim request dan mengupdate state dengan data yang didapat. Sebagai contoh:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction MyComponent() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    axios.get(\"https://your-api-endpoint.com/data\")\n    .then(response => {\n      setData(response.data);\n    });\n  }, []);\n\n  return (\n    <div>\n      {data ? <p>Data: {data}</p> : <p>Loading...</p>}\n    </div>\n  );\n}\n")),(0,i.kt)("h3",{id:"menggunakan-async-await"},"Menggunakan async-await"),(0,i.kt)("p",null,"Kita dapat menggunakan async-await untuk mengirim request axios dan menyimpan data yang didapat dalam state. Ini dapat membuat kode kita lebih mudah dibaca dan diatur."),(0,i.kt)("p",null,"Pada class component berikut contohnya:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import axios from 'axios';\n\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const response = await axios.get(\"https://your-api-endpoint.com/data\");\n      this.setState({ data: response.data });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.data ? <p>Data: {this.state.data}</p> : <p>Loading...</p>}\n      </div>\n    );\n  }\n}\n")),(0,i.kt)("p",null,"Jika implementasinya menggunakan functional component, berikut contohnya:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction MyComponent() {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(\"https://your-api-endpoint.com/data\");\n        setData(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      {data ? <p>Data: {data}</p> : <p>Loading...</p>}\n    </div>\n  );\n}\n")),(0,i.kt)("p",null,"Sekian tulisan kita kali ini, untuk lebih realistisnya kita bisa mencoba beberapa kode diatas langsung menggunakan repl atau menuliskannya di project lokal yang sedang kita kerjakan."),(0,i.kt)("p",null,"Semoga Bermanfaat!"))}m.isMDXComponent=!0}}]);