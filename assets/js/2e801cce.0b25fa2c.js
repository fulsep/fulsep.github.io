"use strict";(self.webpackChunkdocusaurus_blog=self.webpackChunkdocusaurus_blog||[]).push([[9450],{6029:a=>{a.exports=JSON.parse('{"blogPosts":[{"id":"formik-library-ajaib-untuk-memproses-form","metadata":{"permalink":"/formik-library-ajaib-untuk-memproses-form","source":"@site/blog/2023-01-21-007-formik-library-ajaib-untuk-memproses-form.mdx","title":"Formik: Library ajaib untuk memproses form dengan mudah","description":"","date":"2021-05-11T11:00:00.000Z","formattedDate":"11 Mei 2021","tags":[{"label":"Frontend Development","permalink":"/tags/frontend-development"},{"label":"Beginner Frontend","permalink":"/tags/beginner-frontend"},{"label":"ReactJS","permalink":"/tags/react-js"}],"readingTime":3.73,"hasTruncateMarker":true,"authors":[{"name":"Irul","title":"JavaScript Enthusiast","url":"https://github.com/fulsep","imageURL":"https://github.com/fulsep.png","key":"irul"}],"frontMatter":{"slug":"formik-library-ajaib-untuk-memproses-form","title":"Formik: Library ajaib untuk memproses form dengan mudah","authors":["irul"],"tags":["Frontend Development","Beginner Frontend","ReactJS"],"date":"2021-05-11T11:00"},"nextItem":{"title":"Form Processing Pada ReactJS","permalink":"/form-processing-pada-reactjs"}},"content":"import ImageCenterize from \'../src/components/ImageCenterize.js\';\\r\\nimport Link from \'@docusaurus/Link\';\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/forms.png\\" alt=\\"forms\\" />\\r\\n\\r\\nMengingat dari <Link to=\\"/form-processing-pada-reactjs\\">tulisan sebelumnya</Link> kita dapat memproses form dengan berbagai macam cara, ada cara yang lebih mudah lagi untuk memproses sebuah form yakni dengan menggunakan <Link to=\\"https://formik.org/\\">Formik</Link>.\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Instalasi\\r\\n\\r\\nUntuk memproses form di contoh pertama dengan menggunakan Formik, kita perlu menginstal library Formik terlebih dahulu dengan perintah `npm install formik`. Kemudian, kita dapat mengimpor Formik dan menggunakannya dalam komponen kita sebagai berikut:\\r\\n\\r\\n1. Pertama-tama, kita perlu meng-wrap komponen form kita dengan `<Formik>` dan menambahkan props initialValues yang berisi objek dengan nama-nama field form sebagai properti dan nilai awal sebagai nilai dari properti tersebut.\\r\\n2. Selanjutnya, kita perlu menggunakan `<Field>` untuk setiap input dalam form kita. `<Field>` akan menerima props name yang sesuai dengan nama field yang ditentukan dalam initialValues, dan component yang akan digunakan untuk menampilkan input.\\r\\n3. kita juga perlu menambahkan event handler onSubmit pada `<form>` yang akan digunakan untuk menangani submit form. Fungsi ini akan menerima satu argumen yang berisi objek dengan properti-properti yang sesuai dengan nama field form.\\r\\n4. kita juga dapat menambahkan validasi pada form dengan menambahkan prop validationSchema pada `<Formik>` dan membuat objek yup yang akan digunakan untuk validasi.\\r\\n5. kita juga dapat menambahkan error handling, loading state dan lainnya dengan menambahkan beberapa props pada `<Formik>`\\r\\n6. Sekarang, kita dapat mengakses nilai form dan menangani event form dengan lebih mudah menggunakan Formik.\\r\\n\\r\\n## Contoh kode\\r\\n### Tanpa validasi\\r\\n\\r\\nBerikut contoh kode formik tanpa valudasi:\\r\\n\\r\\n```jsx\\r\\nimport React from \'react\';\\r\\nimport { Formik, Form, Field } from \'formik\';\\r\\n\\r\\nconst LoginForm = () => {\\r\\n\\r\\n  const handleSubmit = (values, { setSubmitting }) => {\\r\\n    console.log(\'Email:\', values.email);\\r\\n    console.log(\'Password:\', values.password);\\r\\n    setSubmitting(false);\\r\\n    // Tulis kode lainnya disini, seperti mengirimkan request menggunakan axios\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <Formik\\r\\n      initialValues={{ email: \'\', password: \'\' }}\\r\\n      onSubmit={handleSubmit}\\r\\n    >\\r\\n      {({ isSubmitting }) => (\\r\\n        <Form>\\r\\n          <label>\\r\\n            Email:\\r\\n            <Field type=\\"email\\" name=\\"email\\" />\\r\\n          </label>\\r\\n          <br />\\r\\n          <label>\\r\\n            Password:\\r\\n            <Field type=\\"password\\" name=\\"password\\" />\\r\\n          </label>\\r\\n          <br />\\r\\n          <button type=\\"submit\\" disabled={isSubmitting}>\\r\\n            Login\\r\\n          </button>\\r\\n        </Form>\\r\\n      )}\\r\\n    </Formik>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default LoginForm;\\r\\n```\\r\\n\\r\\n### Dengan validasi\\r\\n\\r\\nValidasi juga bisa dilakukan dengan menambahkan package yup dengan perintah `npm install yup`. Kemudian, kita dapat mengimpor yup dan membuat schema di dalam komponen, contoh kodenya sebagai berikut:\\r\\n\\r\\n```jsx\\r\\nimport React from \'react\';\\r\\nimport { Formik, Form, Field, ErrorMessage } from \'formik\';\\r\\nimport * as Yup from \'yup\';\\r\\n\\r\\nconst LoginForm = () => {\\r\\n  const validationSchema = Yup.object().shape({\\r\\n    email: Yup.string()\\r\\n      .email(\'Invalid email address\')\\r\\n      .required(\'Email is required\'),\\r\\n    password: Yup.string()\\r\\n      .min(8, \'Password must be at least 8 characters\')\\r\\n      .required(\'Password is required\'),\\r\\n  });\\r\\n\\r\\n  const handleSubmit = (values, { setSubmitting }) => {\\r\\n    console.log(\'Email:\', values.email);\\r\\n    console.log(\'Password:\', values.password);\\r\\n    setSubmitting(false);\\r\\n    // Tulis kode lainnya disini, seperti mengirimkan request menggunakan axios\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <Formik\\r\\n      initialValues={{ email: \'\', password: \'\' }}\\r\\n      validationSchema={validationSchema}\\r\\n      onSubmit={handleSubmit}\\r\\n    >\\r\\n      {({ isSubmitting }) => (\\r\\n        <Form>\\r\\n          <label>\\r\\n            Email:\\r\\n            <Field type=\\"email\\" name=\\"email\\" />\\r\\n            <ErrorMessage name=\\"email\\" component=\\"div\\" />\\r\\n          </label>\\r\\n          <br />\\r\\n          <label>\\r\\n            Password:\\r\\n            <Field type=\\"password\\" name=\\"password\\" />\\r\\n            <ErrorMessage name=\\"password\\" component=\\"div\\" />\\r\\n          </label>\\r\\n          <br />\\r\\n          <button type=\\"submit\\" disabled={isSubmitting}>\\r\\n            Login\\r\\n          </button>\\r\\n        </Form>\\r\\n      )}\\r\\n    </Formik>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default LoginForm;\\r\\n```\\r\\n\\r\\nPada contoh di atas, form di-wrap oleh komponen `<Formik>`, dan nilai awal dari field form diteruskan sebagai props initialValues. Skema validasi ditentukan menggunakan library Yup dan diteruskan sebagai props validationSchema. Fungsi handleSubmit diteruskan sebagai props onSubmit dan akan dipanggil saat form dikirim, dengan nilai form dan props tambahan seperti setSubmitting.\\r\\n\\r\\nElemen form diganti dengan komponen `<Field>`, yang menerima props name yang sesuai dengan nama field dalam objek initialValues dan props component untuk menampilkan input.\\r\\n\\r\\nKita juga dapat menambahkan error handling, state loading dan lainnya dengan menambahkan beberapa props pada `<Formik>`.\\r\\n\\r\\nPastikan untuk meng-import Formik, Yup dan library lain yang diperlukan pada file yang digunakan.\\r\\n\\r\\n### Penjelasan lebih jauh tentang yup\\r\\n\\r\\nPada contoh kode di atas, objek validationSchema didefinisikan menggunakan library Yup.\\r\\n\\r\\n`Yup.object().shape({...})` digunakan untuk membuat objek yang akan digunakan untuk validasi. Dengan shape, kita dapat menentukan properti-properti yang harus divalidasi pada objek tersebut.\\r\\n\\r\\nDidalam objek tersebut, properti email di deklarasikan sebagai string yang harus sesuai dengan format email dengan menggunakan `.email()` . Jika tidak sesuai dengan format email maka akan mengeluarkan pesan error \\"Invalid email address\\" dan harus diisi dengan menggunakan `.required(\'Email is required\')`.\\r\\n\\r\\nSedangkan untuk properti password di deklarasikan sebagai string yang harus lebih dari 8 karakter dengan menggunakan `.min(8, \'Password must be at least 8 characters\')` dan harus diisi dengan menggunakan `.required(\'Password is required\')`\\r\\n\\r\\nSecara keseluruhan, objek validationSchema ini digunakan untuk memvalidasi input dari form yang diterima oleh Formik dan memberikan feedback error sesuai dengan kondisi yang ditentukan.\\r\\n\\r\\nSemoga Bermanfaat!"},{"id":"form-processing-pada-reactjs","metadata":{"permalink":"/form-processing-pada-reactjs","source":"@site/blog/2023-01-21-006-form-processing-pada-reactjs.mdx","title":"Form Processing Pada ReactJS","description":"","date":"2021-05-10T11:00:00.000Z","formattedDate":"10 Mei 2021","tags":[{"label":"Frontend Development","permalink":"/tags/frontend-development"},{"label":"Beginner Frontend","permalink":"/tags/beginner-frontend"},{"label":"ReactJS","permalink":"/tags/react-js"}],"readingTime":3.44,"hasTruncateMarker":true,"authors":[{"name":"Irul","title":"JavaScript Enthusiast","url":"https://github.com/fulsep","imageURL":"https://github.com/fulsep.png","key":"irul"}],"frontMatter":{"slug":"form-processing-pada-reactjs","title":"Form Processing Pada ReactJS","authors":["irul"],"tags":["Frontend Development","Beginner Frontend","ReactJS"],"date":"2021-05-10T11:00"},"prevItem":{"title":"Formik: Library ajaib untuk memproses form dengan mudah","permalink":"/formik-library-ajaib-untuk-memproses-form"},"nextItem":{"title":"Arrow Function: Hal yang harus kamu tahu!","permalink":"/hal-yang-harus-diketahui-tentang-arrow-function"}},"content":"import ImageCenterize from \'../src/components/ImageCenterize.js\';\\r\\nimport Link from \'@docusaurus/Link\';\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/forms.png\\" alt=\\"forms\\" />\\r\\n\\r\\nKetika berkaitan dengan Form, ada banyak sekali cara implementasi yang perlu kita ketahui pada ReactJS. Tidak ada benar ataupun salah, selama kita dapat memproses form dengan nyaman dan mudah untuk dikelola nantinya, pemrosesan form dapat diimplementasi sesuai dengan keinginan kita.\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Hal penting yang perlu diketahui saat memproses form di ReactJS\\r\\n\\r\\n1. Kita dapat menggunakan state untuk menyimpan nilai input dari form.\\r\\n2. Kita dapat menggunakan event handlers seperti onChange untuk menangani perubahan pada input form.\\r\\n3. Kita dapat menggunakan event handlers seperti onSubmit untuk menangani submit form.\\r\\n4. Kita dapat menggunakan library seperti Formik atau React-Form untuk membuat proses penginputan form lebih mudah.\\r\\n5. Pastikan untuk menambahkan atribut \\"name\\" pada setiap input untuk dapat mengambil nilai dari form tersebut.\\r\\n6. Ingat untuk meng-handle validasi dan error pada form.\\r\\n7. Ingat untuk meng-handle loading state saat form sedang dikirim.\\r\\n\\r\\n## Cara Implementasi Form di ReactJS\\r\\n\\r\\n### Memanfaatkan state\\r\\n\\r\\nCara termudah untuk membuat form di ReactJS seperti berikut:\\r\\n\\r\\n```jsx\\r\\nimport React, { useState } from \'react\';\\r\\n\\r\\nconst LoginForm = () => {\\r\\n  const [email, setEmail] = useState(\'\');\\r\\n  const [password, setPassword] = useState(\'\');\\r\\n\\r\\n  const handleSubmit = (event) => {\\r\\n    event.preventDefault();\\r\\n    console.log(\'Email:\', email);\\r\\n    console.log(\'Password:\', password);\\r\\n    // Tulis kode lainnya disini, seperti mengirimkan request menggunakan axios\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <form onSubmit={handleSubmit}>\\r\\n      <label>\\r\\n        Email:\\r\\n        <input\\r\\n          type=\\"email\\"\\r\\n          value={email}\\r\\n          onChange={(event) => setEmail(event.target.value)}\\r\\n        />\\r\\n      </label>\\r\\n      <br />\\r\\n      <label>\\r\\n        Password:\\r\\n        <input\\r\\n          type=\\"password\\"\\r\\n          value={password}\\r\\n          onChange={(event) => setPassword(event.target.value)}\\r\\n        />\\r\\n      </label>\\r\\n      <br />\\r\\n      <button type=\\"submit\\">Login</button>\\r\\n    </form>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default LoginForm;\\r\\n```\\r\\nPada contoh di atas, komponen menggunakan hook useState untuk menyimpan nilai dari input email dan password pada state variable email dan password secara masing-masing. Fungsi handleSubmit akan dipanggil saat form dikirim dan akan mencegah aksi default dari form dan menampilkan email dan password yang dimasukkan ke dalam console.\\r\\n\\r\\n### Memanfaatkan event dari onSubmit\\r\\n\\r\\n```jsx\\r\\nimport React, { useState } from \'react\';\\r\\n\\r\\nconst LoginForm = () => {\\r\\n  const [email, setEmail] = useState(\'\');\\r\\n  const [password, setPassword] = useState(\'\');\\r\\n\\r\\n  const handleSubmit = (event) => {\\r\\n    event.preventDefault();\\r\\n    const formData = new FormData(event.target);\\r\\n    console.log(\\"Email: \\",formData.get(\\"email\\"))\\r\\n    console.log(\\"Password: \\",formData.get(\\"password\\"))\\r\\n    // Tulis kode lainnya disini, seperti mengirimkan request menggunakan axios\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <form onSubmit={handleSubmit}>\\r\\n      <label>\\r\\n        Email:\\r\\n        <input\\r\\n          type=\\"email\\"\\r\\n          name=\\"email\\"\\r\\n          value={email}\\r\\n          onChange={(event) => setEmail(event.target.value)}\\r\\n        />\\r\\n      </label>\\r\\n      <br />\\r\\n      <label>\\r\\n        Password:\\r\\n        <input\\r\\n          type=\\"password\\"\\r\\n          name=\\"password\\"\\r\\n          value={password}\\r\\n          onChange={(event) => setPassword(event.target.value)}\\r\\n        />\\r\\n      </label>\\r\\n      <br />\\r\\n      <button type=\\"submit\\">Login</button>\\r\\n    </form>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default LoginForm;\\r\\n```\\r\\n\\r\\nPada contoh di atas, fungsi handleSubmit akan dipanggil saat form dikirim, dan akan mencegah aksi default dari form. Kemudian akan dibuat object FormData baru dengan menuliskan event.target sebagai argumen pertama. Nilai input dapat diakses dengan menggunakan method get dengan nama input sebagai parameter.\\r\\n\\r\\nPastikan untuk menambahkan atribut name pada elemen input, sehingga nilai input dapat diakses pada event. Jika kita perhatikan, kedua input yang kita buat diatas sama dengan contoh yang sebelumnya, hanya saja dia memiliki atribut name pada setiap elemen input yang dibuat.\\r\\n\\r\\nKita juga dapat menggunakan event.target.elements untuk mengakses nilai input, namun tidak disarankan untuk menggunakannya karena tidak didukung oleh semua browser.\\r\\n\\r\\n### Memanfaatkan event.target.elements dari onSubmit\\r\\nMeskipun tidak didukung oleh semua browser kita juga perlu mengetahui cara implementasinya bukan? berikut contohnya:\\r\\n\\r\\n```jsx\\r\\nimport React, { useState } from \'react\';\\r\\n\\r\\nconst LoginForm = () => {\\r\\n  const [email, setEmail] = useState(\'\');\\r\\n  const [password, setPassword] = useState(\'\');\\r\\n\\r\\n  const handleSubmit = (event) => {\\r\\n    event.preventDefault();\\r\\n    const emailValue = event.target.elements.email.value;\\r\\n    const passwordValue = event.target.elements.password.value;\\r\\n    console.log(\\"Email: \\", emailValue);\\r\\n    console.log(\\"Password: \\", passwordValue);\\r\\n    // Tulis kode lainnya disini, seperti mengirimkan request menggunakan axios\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <form onSubmit={handleSubmit}>\\r\\n      <label>\\r\\n        Email:\\r\\n        <input\\r\\n          type=\\"email\\"\\r\\n          name=\\"email\\"\\r\\n          value={email}\\r\\n          onChange={(event) => setEmail(event.target.value)}\\r\\n        />\\r\\n      </label>\\r\\n      <br />\\r\\n      <label>\\r\\n        Password:\\r\\n        <input\\r\\n          type=\\"password\\"\\r\\n          name=\\"password\\"\\r\\n          value={password}\\r\\n          onChange={(event) => setPassword(event.target.value)}\\r\\n        />\\r\\n      </label>\\r\\n      <br />\\r\\n      <button type=\\"submit\\">Login</button>\\r\\n    </form>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default LoginForm;\\r\\n```\\r\\n\\r\\nPada contoh di atas, fungsi handleSubmit akan dipanggil saat form dikirim, dan akan mencegah aksi default dari form. Kemudian nilai dari input akan diakses dengan mengakses properti elements dari event target, yang berisi semua elemen form, dan dengan menggunakan nama input sebagai properti. Nilai dari input diakses dengan mengambil properti value dari elemen tersebut.\\r\\n\\r\\nPastikan untuk menambahkan atribut name pada elemen input, sehingga nilai input dapat diakses pada event.\\r\\n\\r\\nSemoga Bermanfaat!"},{"id":"hal-yang-harus-diketahui-tentang-arrow-function","metadata":{"permalink":"/hal-yang-harus-diketahui-tentang-arrow-function","source":"@site/blog/2023-01-21-005-hal-yang-harus-diketahui-tentang-arrow-function.mdx","title":"Arrow Function: Hal yang harus kamu tahu!","description":"","date":"2021-05-09T11:00:00.000Z","formattedDate":"9 Mei 2021","tags":[{"label":"JavaScript","permalink":"/tags/java-script"},{"label":"Beginner JavaScript","permalink":"/tags/beginner-java-script"}],"readingTime":2.425,"hasTruncateMarker":true,"authors":[{"name":"Irul","title":"JavaScript Enthusiast","url":"https://github.com/fulsep","imageURL":"https://github.com/fulsep.png","key":"irul"}],"frontMatter":{"slug":"hal-yang-harus-diketahui-tentang-arrow-function","title":"Arrow Function: Hal yang harus kamu tahu!","authors":["irul"],"tags":["JavaScript","Beginner JavaScript"],"date":"2021-05-09T11:00"},"prevItem":{"title":"Form Processing Pada ReactJS","permalink":"/form-processing-pada-reactjs"},"nextItem":{"title":"Terlalu Banyak State? Atasi Dengan Ini!","permalink":"/terlalu-banyak-state-atasi-dengan-ini"}},"content":"import ImageCenterize from \'../src/components/ImageCenterize.js\';\\r\\nimport Link from \'@docusaurus/Link\';\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/forward.png\\" alt=\\"forward\\" />\\r\\n\\r\\nArrow function, atau yang juga dikenal sebagai \\"fat arrow\\" function, adalah notasi pendek untuk menulis fungsi anonim di JavaScript. Mereka dianggap sebagai cara yang lebih ringkas dan ekspresif untuk menulis ekspresi fungsi, dan sering digunakan dalam situasi di mana sebuah fungsi diberikan sebagai argumen ke fungsi lain, seperti dalam metode array seperti map dan filter.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Contoh implementasi\\r\\n\\r\\nBerikut ini adalah contoh arrow function:\\r\\n\\r\\n```js\\r\\nconst myFunction = (a, b) => a + b;\\r\\nconsole.log(myFunction(1, 2)); // Output: 3\\r\\n```\\r\\n\\r\\nDalam contoh ini, myFunction adalah arrow function yang mengambil dua argumen, a dan b, dan mengembalikan jumlah dari argumen tersebut.\\r\\n\\r\\nArrow function juga memiliki sintaks shorthand untuk saat hanya memiliki satu argumen dan tubuh satu baris:\\r\\n\\r\\n```js\\r\\nconst myFunction = a => a * 2;\\r\\nconsole.log(myFunction(3)); // Output: 6\\r\\n```\\r\\n\\r\\n## Hal penting tentang arrow function\\r\\n\\r\\n1. Sintaks yang lebih ringkas: Arrow function memiliki sintaks yang lebih singkat dibandingkan dengan fungsi biasa, yang dapat membuat kode kita lebih mudah dibaca dan dipahami.\\r\\n2. Tanpa keyword this: Arrow function tidak memiliki keyword this sendiri, sehingga mereka akan mewarisi this dari lingkungan scope parent mereka. Ini dapat membuat kode kita lebih mudah diprediksi dan diantisipasi.\\r\\n3. Tanpa keyword arguments: Arrow function juga tidak memiliki keyword arguments, sehingga kita harus menggunakan parameter fungsi yang ditentukan secara eksplisit.\\r\\n4. Tanpa new: Arrow function tidak dapat digunakan dengan operator new, sehingga mereka tidak dapat digunakan sebagai constructor.\\r\\n5. Tidak dapat digunakan sebagai generator: Arrow function juga tidak dapat digunakan sebagai generator.\\r\\n\\r\\n## Penggunaan tanda kurung pada arrow function\\r\\n\\r\\nDalam arrow function, kita dapat menulis kode tanpa tanda kurung dan kurung kurawal jika hanya ada satu argumen atau satu baris kode dalam tubuh fungsi.\\r\\n\\r\\nContoh:\\r\\n\\r\\n```js\\r\\nconst double = num => num * 2;\\r\\nconsole.log(double(5)); // Output: 10\\r\\n```\\r\\n\\r\\nDi atas adalah sintaks shorthand yang sangat berguna ketika kita hanya ingin mengeksekusi satu perintah saat fungsi dipanggil.\\r\\n\\r\\nJika kita memiliki lebih dari satu argumen atau lebih dari satu baris kode dalam tubuh fungsi, kita harus menggunakan tanda kurung untuk argumen dan kurung kurawal untuk tubuh fungsi.\\r\\n\\r\\nContoh:\\r\\n\\r\\n```js\\r\\nconst add = (num1, num2) => {\\r\\n  const result = num1 + num2;\\r\\n  return result;\\r\\n};\\r\\nconsole.log(add(2, 3)); // Output: 5\\r\\n```\\r\\n\\r\\nIni juga berlaku jika kita menggunakan arrow function sebagai async function, harus menggunakan tanda kurung dan kurung kurawal.\\r\\n\\r\\n```js\\r\\nconst myAsyncFunction = async () => {\\r\\n  // kode disini\\r\\n};\\r\\n```\\r\\n\\r\\nPenggunaan kurung biasa dan kurung kurawal pada tubuh arrow function juga berfungsi untuk mengatasi cara arrow function mengembalikan nilai\\r\\n\\r\\n```js\\r\\nconst arrowFunction = () => {\\r\\n  return \\"Hello\\"\\r\\n};\\r\\n```\\r\\n\\r\\nKode di atas menggunakan kurung kurawal untuk mengembalikan nilai \\"Hello\\" ketika arrowFunction dipanggil, kita juga dapat menuliskannya seperti berikut:\\r\\n\\r\\n```js\\r\\nconst arrowFunction = () => (\\"Hello\\");\\r\\n```\\r\\n\\r\\nKode di atas akan menampilkan hasil yang sama, perbedaannya adalah penggunaan dari kurung biasa dan kurung kurawal saja.\\r\\n\\r\\nSemoga Bermanfaat!"},{"id":"terlalu-banyak-state-atasi-dengan-ini","metadata":{"permalink":"/terlalu-banyak-state-atasi-dengan-ini","source":"@site/blog/2023-01-21-004-terlalu-banyak-state-atasi-dengan-ini.mdx","title":"Terlalu Banyak State? Atasi Dengan Ini!","description":"","date":"2021-05-08T11:00:00.000Z","formattedDate":"8 Mei 2021","tags":[{"label":"Frontend Development","permalink":"/tags/frontend-development"},{"label":"ReactJS","permalink":"/tags/react-js"}],"readingTime":2.29,"hasTruncateMarker":true,"authors":[{"name":"Irul","title":"JavaScript Enthusiast","url":"https://github.com/fulsep","imageURL":"https://github.com/fulsep.png","key":"irul"}],"frontMatter":{"slug":"terlalu-banyak-state-atasi-dengan-ini","title":"Terlalu Banyak State? Atasi Dengan Ini!","authors":["irul"],"tags":["Frontend Development","ReactJS"],"date":"2021-05-08T11:00"},"prevItem":{"title":"Arrow Function: Hal yang harus kamu tahu!","permalink":"/hal-yang-harus-diketahui-tentang-arrow-function"},"nextItem":{"title":"Upload file dengan ReactJS dan axios","permalink":"/upload-file-dengan-reactjs-dan-axios"}},"content":"import ImageCenterize from \'../src/components/ImageCenterize.js\';\\r\\nimport Link from \'@docusaurus/Link\';\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodata.png\\" alt=\\"nodata\\" />\\r\\n\\r\\nPada saat kita membuat sebuah form di ReactJS, pastinya kita harus menyimpan setiap data dari user input, benar? Tapi sayangnya kebanyakan dari kita mengimplementasikan kode untuk 1 input 1 state seperti berikut:\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n```jsx\\r\\nimport React, { useState } from \'react\';\\r\\n\\r\\nfunction Form() {\\r\\n  const [firstName, setFirstName] = useState(\'\');\\r\\n  const [lastName, setLastName] = useState(\'\');\\r\\n  const [phoneNumber, setPhoneNumber] = useState(\'\');\\r\\n  const [email, setEmail] = useState(\'\');\\r\\n\\r\\n  return (\\r\\n    <form>\\r\\n      <label>\\r\\n        First Name:\\r\\n        <input type=\\"text\\" value={firstName} onChange={e => setFirstName(e.target.value)} />\\r\\n      </label>\\r\\n      <br />\\r\\n      <label>\\r\\n        Last Name:\\r\\n        <input type=\\"text\\" value={lastName} onChange={e => setLastName(e.target.value)} />\\r\\n      </label>\\r\\n      <br />\\r\\n      <label>\\r\\n        Phone Number:\\r\\n        <input type=\\"text\\" value={phoneNumber} onChange={e => setPhoneNumber(e.target.value)} />\\r\\n      </label>\\r\\n      <br />\\r\\n      <label>\\r\\n        Email:\\r\\n        <input type=\\"email\\" value={email} onChange={e => setEmail(e.target.value)} />\\r\\n      </label>\\r\\n      <br />\\r\\n    </form>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default Form;\\r\\n```\\r\\n\\r\\nKode diatas bisa kita per-simple dengan menggunakan 1 state saja, berikut contohnya:\\r\\n\\r\\n```jsx\\r\\nimport React, { useState } from \'react\';\\r\\n\\r\\nfunction Form() {\\r\\n  const [formData, setFormData] = useState({\\r\\n    firstName: \'\',\\r\\n    lastName: \'\',\\r\\n    phoneNumber: \'\',\\r\\n    email: \'\'\'\\r\\n  });\\r\\n\\r\\n  const handleChange = e => {\\r\\n    setFormData({\\r\\n      ...formData,\\r\\n      [e.target.name]: e.target.value\\r\\n    });\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <form>\\r\\n      <label>\\r\\n        First Name:\\r\\n        <input type=\\"text\\" name=\\"firstName\\" value={formData.firstName} onChange={handleChange} />\\r\\n      </label>\\r\\n      <br />\\r\\n      <label>\\r\\n        Last Name:\\r\\n        <input type=\\"text\\" name=\\"lastName\\" value={formData.lastName} onChange={handleChange} />\\r\\n      </label>\\r\\n      <br />\\r\\n      <label>\\r\\n        Phone Number:\\r\\n        <input type=\\"text\\" name=\\"phoneNumber\\" value={formData.phoneNumber} onChange={handleChange} />\\r\\n      </label>\\r\\n      <br />\\r\\n      <label>\\r\\n        Email:\\r\\n        <input type=\\"email\\" name=\\"email\\" value={formData.email} onChange={handleChange} />\\r\\n      </label>\\r\\n      <br />\\r\\n    </form>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default Form;\\r\\n```\\r\\n\\r\\nAtau kita juga bisa menggunakan hook useReducer dari React untuk handling form\\r\\n\\r\\n```jsx\\r\\nimport React, { useReducer } from \'react\';\\r\\n\\r\\nconst initialState = {\\r\\n  firstName: \'\',\\r\\n  lastName: \'\',\\r\\n  phoneNumber: \'\',\\r\\n  email: \'\'\\r\\n};\\r\\n\\r\\nconst formReducer = (state, action) => {\\r\\n  switch (action.type) {\\r\\n    case \'UPDATE_FIELD\':\\r\\n      return { ...state, [action.field]: action.value };\\r\\n    default:\\r\\n      return state;\\r\\n  }\\r\\n};\\r\\n\\r\\nfunction Form() {\\r\\n  const [formData, dispatch] = useReducer(formReducer, initialState);\\r\\n\\r\\n  const handleChange = e => {\\r\\n    dispatch({\\r\\n      type: \'UPDATE_FIELD\',\\r\\n      field: e.target.name,\\r\\n      value: e.target.value\\r\\n    });\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <form>\\r\\n      <label>\\r\\n        First Name:\\r\\n        <input type=\\"text\\" name=\\"firstName\\" value={formData.firstName} onChange={handleChange} />\\r\\n      </label>\\r\\n      <br />\\r\\n      <label>\\r\\n        Last Name:\\r\\n        <input type=\\"text\\" name=\\"lastName\\" value={formData.lastName} onChange={handleChange} />\\r\\n      </label>\\r\\n      <br />\\r\\n      <label>\\r\\n        Phone Number:\\r\\n        <input type=\\"text\\" name=\\"phoneNumber\\" value={formData.phoneNumber} onChange={handleChange} />\\r\\n      </label>\\r\\n      <br />\\r\\n      <label>\\r\\n        Email:\\r\\n        <input type=\\"email\\" name=\\"email\\" value={formData.email} onChange={handleChange} />\\r\\n      </label>\\r\\n      <br />\\r\\n    </form>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default Form;\\r\\n```\\r\\n\\r\\nDi atas, kita menggunakan useReducer untuk mengelola data form. Kita membuat sebuah objek state awal yang berisi properti untuk masing-masing input field. Selanjutnya, kita membuat sebuah fungsi reducer yang digunakan untuk memperbarui state sesuai dengan tipe aksi yang diterima.\\r\\n\\r\\nKetika pengguna mengetik di salah satu input field, fungsi handleChange dipanggil dan mengirimkan aksi dengan tipe UPDATE_FIELD, nama field dan nilai sebagai properti. Fungsi reducer kemudian menggunakan nama field untuk memperbarui properti yang sesuai dalam objek state.\\r\\n\\r\\n\\r\\nSemoga Bermanfaat!"},{"id":"upload-file-dengan-reactjs-dan-axios","metadata":{"permalink":"/upload-file-dengan-reactjs-dan-axios","source":"@site/blog/2023-01-21-003-upload-file-dengan-reactjs-dan-axios.mdx","title":"Upload file dengan ReactJS dan axios","description":"","date":"2021-05-07T11:00:00.000Z","formattedDate":"7 Mei 2021","tags":[{"label":"Frontend Development","permalink":"/tags/frontend-development"},{"label":"Beginner Frontend","permalink":"/tags/beginner-frontend"},{"label":"ReactJS","permalink":"/tags/react-js"}],"readingTime":4.965,"hasTruncateMarker":true,"authors":[{"name":"Irul","title":"JavaScript Enthusiast","url":"https://github.com/fulsep","imageURL":"https://github.com/fulsep.png","key":"irul"}],"frontMatter":{"slug":"upload-file-dengan-reactjs-dan-axios","title":"Upload file dengan ReactJS dan axios","authors":["irul"],"tags":["Frontend Development","Beginner Frontend","ReactJS"],"date":"2021-05-07T11:00"},"prevItem":{"title":"Terlalu Banyak State? Atasi Dengan Ini!","permalink":"/terlalu-banyak-state-atasi-dengan-ini"},"nextItem":{"title":"React Lifecycle: Class Component vs Functional Component","permalink":"/perbedaan-lifecycle-react-pada-class-component-dan-functional-component"}},"content":"import ImageCenterize from \'../src/components/ImageCenterize.js\';\\r\\nimport Link from \'@docusaurus/Link\';\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/upload.png\\" alt=\\"upload\\" />\\r\\n\\r\\nPada dasarnya, upload file adalah sebuah aksi mengirimkan data dan biasanya menggunakan method POST/PATCH/PUT sesuai dengan kebutuhan. Pada tulisan kali ini kita akan membahas lebih jauh tentang bagaimana caranya mengimplementasi upload dengan axios dengan library ReactJS.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Langkah-langkah\\r\\n\\r\\nUntuk mengimplementasikan axios post dengan multipart form data dari input tipe file di ReactJS, kita dapat mengikuti langkah-langkah berikut:\\r\\n\\r\\n1. Instal axios: Kita dapat menginstal axios dengan perintah npm atau yarn\\r\\n```sh\\r\\nnpm i axios\\r\\n```\\r\\n```sh\\r\\nyarn add axios\\r\\n```\\r\\n2. Import axios: Pada file JavaScript kita, import axios dengan perintah\\r\\n```jsx\\r\\nimport axios from \'axios\';\\r\\n```\\r\\n3. Tambahkan event listener pada input file: Tambahkan event listener pada input file yang digunakan untuk menangkap file yang dipilih oleh pengguna.\\r\\n4. Buat fungsi untuk mengirim data: Buat fungsi yang akan digunakan untuk mengirim data ke server. Dalam fungsi tersebut, kita dapat menggunakan axios post dengan mengirimkan file yang dipilih oleh pengguna dalam format multipart form data. \\r\\n\\r\\n```js\\r\\n  const handleSubmit = async (event) => {\\r\\n    event.preventDefault();\\r\\n    const formData = new FormData();\\r\\n    formData.append(\\"file\\", file);\\r\\n    try {\\r\\n      const response = await axios.post(\\"URL\\", formData, {\\r\\n        headers: {\\r\\n          \\"Content-Type\\": \\"multipart/form-data\\",\\r\\n        },\\r\\n      });\\r\\n      console.log(response.data);\\r\\n    } catch (error) {\\r\\n      console.log(error);\\r\\n    }\\r\\n  };\\r\\n```\\r\\n\\r\\n## Penggunaan pada ReactJS input component\\r\\n\\r\\n### Upload setelah memilih file\\r\\n\\r\\nUntuk memanggil fungsi handleSubmit yang dibuat di ReactJS input file, kita dapat menambahkan event listener pada elemen input file, seperti ini:\\r\\n1. Tambahkan atribut onChange pada elemen input file:\\r\\n```jsx\\r\\n<input type=\\"file\\" onChange={handleSubmit}/>\\r\\n```\\r\\n2. Pada event listener onChange, kita dapat mengambil file yang dipilih oleh pengguna dan menyimpannya dalam state, seperti ini:\\r\\n```js\\r\\nconst handleSubmit = (event) => {\\r\\n    setFile(event.target.files[0]); // menyimpan file yang dipilih oleh pengguna dalam state\\r\\n    event.preventDefault(); // mencegah event default dari input file\\r\\n    // kode untuk mengirim data ke server menggunakan axios\\r\\n  };\\r\\n```\\r\\n3. Pada saat user meng-upload file, fungsi handleSubmit akan dijalankan dan mengirim data ke server dengan axios post\\r\\n\\r\\nBerikut kode lengkapnya:\\r\\n```jsx\\r\\nimport React, { useState } from \\"react\\";\\r\\nimport axios from \\"axios\\";\\r\\n\\r\\nconst FileUpload = () => {\\r\\n  const [file, setFile] = useState(null);\\r\\n\\r\\n  const handleChange = async (event) => {\\r\\n    setFile(event.target.files[0]);\\r\\n    const formData = new FormData();\\r\\n    formData.append(\\"file\\", file);\\r\\n    try {\\r\\n      const response = await axios.post(\\"URL\\", formData, {\\r\\n        headers: {\\r\\n          \\"Content-Type\\": \\"multipart/form-data\\",\\r\\n        },\\r\\n      });\\r\\n      console.log(response.data);\\r\\n    } catch (error) {\\r\\n      console.log(error);\\r\\n    }\\r\\n  };\\r\\n\\r\\n  return <input type=\\"file\\" onChange={handleChange} />;\\r\\n};\\r\\n\\r\\nexport default FileUpload;\\r\\n```\\r\\n\\r\\n### Upload setelah menekan tombol\\r\\n\\r\\nUntuk memanggil fungsi handleSubmit dengan menggunakan tombol submit di ReactJS component input file, kita dapat menambahkan event listener pada elemen tombol submit, seperti ini:\\r\\n\\r\\n1. Tambahkan elemen tombol submit di component input file:\\r\\n```html\\r\\n<form onSubmit={handleSubmit}>\\r\\n    <input type=\\"file\\" onChange={(e) => setFile(e.target.files[0])}/>\\r\\n    <button type=\\"submit\\">Upload</button>\\r\\n</form>\\r\\n```\\r\\n2. Pada event listener onSubmit yang ditambahkan pada elemen form, kita dapat mengambil file yang dipilih oleh pengguna dari state dan mengirimkannya ke server menggunakan axios post:\\r\\n```js\\r\\nconst handleSubmit = async (event) => {\\r\\n    event.preventDefault();\\r\\n    const formData = new FormData();\\r\\n    formData.append(\\"file\\", file);\\r\\n    try {\\r\\n      const response = await axios.post(\\"URL\\", formData, {\\r\\n        headers: {\\r\\n          \\"Content-Type\\": \\"multipart/form-data\\",\\r\\n        },\\r\\n      });\\r\\n      console.log(response.data);\\r\\n    } catch (error) {\\r\\n      console.log(error);\\r\\n    }\\r\\n  };\\r\\n```\\r\\n3. Pada saat user mengklik tombol submit, fungsi handleSubmit akan dijalankan dan mengirim data ke server dengan axios post.\\r\\n\\r\\nBerikut kode lengkapnya:\\r\\n```jsx\\r\\nimport React, { useState } from \\"react\\";\\r\\nimport axios from \\"axios\\";\\r\\n\\r\\nconst FileUpload = () => {\\r\\n  const [file, setFile] = useState(null);\\r\\n\\r\\n  const handleSubmit = async (event) => {\\r\\n    event.preventDefault();\\r\\n    const formData = new FormData();\\r\\n    formData.append(\\"file\\", file);\\r\\n    try {\\r\\n      const response = await axios.post(\\"URL\\", formData, {\\r\\n        headers: {\\r\\n          \\"Content-Type\\": \\"multipart/form-data\\",\\r\\n        },\\r\\n      });\\r\\n      console.log(response.data);\\r\\n    } catch (error) {\\r\\n      console.log(error);\\r\\n    }\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <form onSubmit={handleSubmit}>\\r\\n      <input type=\\"file\\" onChange={(e) => setFile(e.target.files[0])} />\\r\\n      <button type=\\"submit\\">Upload</button>\\r\\n    </form>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default FileUpload;\\r\\n```\\r\\n\\r\\n## Mengirimkan data lain bersamaan dengan file upload\\r\\n\\r\\nUntuk mengirim data lain seperti nama, tanggal lahir, dan nomor telepon bersamaan dengan file dalam satu kali post request menggunakan axios, kita dapat menambahkan data tersebut ke dalam objek FormData sebelum dikirim ke server.\\r\\n\\r\\n1. Tambahkan data lain ke dalam objek FormData: Kita dapat menambahkan data lain seperti nama, tanggal lahir, dan nomor telepon ke dalam objek FormData sebelum menambahkan file ke dalam objek tersebut.\\r\\n```js\\r\\nconst formData = new FormData();\\r\\nformData.append(\\"file\\", file);\\r\\nformData.append(\\"nama\\", nama);\\r\\nformData.append(\\"tanggalLahir\\", tanggalLahir);\\r\\nformData.append(\\"nomorTelepon\\", nomorTelepon);\\r\\n```\\r\\n2. Tambahkan data lain yang diperlukan pada form: Kita dapat menambahkan input yang sesuai dengan data yang diperlukan pada form.\\r\\n```jsx\\r\\n<form onSubmit={handleSubmit}>\\r\\n    <input type=\\"file\\" onChange={(e) => setFile(e.target.files[0])}/>\\r\\n    <input type=\\"text\\" placeholder=\\"Nama\\" onChange={(e) => setNama(e.target.value)}/>\\r\\n    <input type=\\"text\\" placeholder=\\"Tanggal Lahir\\" onChange={(e) => setTanggalLahir(e.target.value)}/>\\r\\n    <input type=\\"text\\" placeholder=\\"Nomor Telepon\\" onChange={(e) => setNomorTelepon(e.target.value)}/>\\r\\n    <button type=\\"submit\\">Upload</button>\\r\\n</form>\\r\\n```\\r\\n3. Kirim data lain beserta file menggunakan axios post: Kita dapat mengirim data lain beserta file menggunakan axios post dengan mengirimkan objek FormData yang sudah diisi dengan data lain dan file.\\r\\n```js\\r\\nconst handleSubmit = async (event) => {\\r\\n    event.preventDefault();\\r\\n    const formData = new FormData();\\r\\n    formData.append(\\"file\\", file);\\r\\n    formData.append(\\"nama\\", nama);\\r\\n    formData.append(\\"tanggalLahir\\", tanggalLahir);\\r\\n    formData.append(\\"nomorTelepon\\", nomorTelepon);\\r\\n    try {\\r\\n      const response = await axios.post(\\"URL\\", formData, {\\r\\n        headers: {\\r\\n          \\"Content-Type\\": \\"multipart/form-data\\",\\r\\n        },\\r\\n      });\\r\\n      console.log(response.data);\\r\\n    } catch (error) {\\r\\n      console.log(error);\\r\\n    }\\r\\n  };\\r\\n```\\r\\n\\r\\nBerikut kode lengkapnya:\\r\\n```jsx\\r\\nimport React, { useState } from \\"react\\";\\r\\nimport axios from \\"axios\\";\\r\\n\\r\\nconst FileUpload = () => {\\r\\n  const [file, setFile] = useState(null);\\r\\n  const [nama, setNama] = useState(\\"\\");\\r\\n  const [tanggalLahir, setTanggalLahir] = useState(\\"\\");\\r\\n  const [nomorTelepon, setNomorTelepon] = useState(\\"\\");\\r\\n\\r\\n  const handleSubmit = async (event) => {\\r\\n    event.preventDefault();\\r\\n    const formData = new FormData();\\r\\n    formData.append(\\"file\\", file);\\r\\n    formData.append(\\"nama\\", nama);\\r\\n    formData.append(\\"tanggalLahir\\", tanggalLahir);\\r\\n    formData.append(\\"nomorTelepon\\", nomorTelepon);\\r\\n    try {\\r\\n      const response = await axios.post(\\"URL\\", formData, {\\r\\n        headers: {\\r\\n          \\"Content-Type\\": \\"multipart/form-data\\",\\r\\n        },\\r\\n      });\\r\\n      console.log(response.data);\\r\\n    } catch (error) {\\r\\n      console.log(error);\\r\\n    }\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <form onSubmit={handleSubmit}>\\r\\n      <input type=\\"file\\" onChange={(e) => setFile(e.target.files[0])} />\\r\\n      <input\\r\\n        type=\\"text\\"\\r\\n        placeholder=\\"Nama\\"\\r\\n        onChange={(e) => setNama(e.target.value)}\\r\\n      />\\r\\n      <input\\r\\n        type=\\"text\\"\\r\\n        placeholder=\\"Tanggal Lahir\\"\\r\\n        onChange={(e) => setTanggalLahir(e.target.value)}\\r\\n      />\\r\\n      <input\\r\\n        type=\\"text\\"\\r\\n        placeholder=\\"Nomor Telepon\\"\\r\\n        onChange={(e) => setNomorTelepon(e.target.value)}\\r\\n      />\\r\\n      <button type=\\"submit\\">Upload</button>\\r\\n    </form>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default FileUpload;\\r\\n```\\r\\n\\r\\nYang paling penting adalah pastikan server kita dapat menerima dan menangani data yang dikirim dalam format multipart form data, jika menggunakan ExpressJS kita dapat menggunakan package multer untuk memprosesnya.\\r\\n\\r\\nSemoga Bermanfaat!"},{"id":"perbedaan-lifecycle-react-pada-class-component-dan-functional-component","metadata":{"permalink":"/perbedaan-lifecycle-react-pada-class-component-dan-functional-component","source":"@site/blog/2023-01-21-002-perbedaan-lifecycle-react-pada-class-component-dan-functional-component.mdx","title":"React Lifecycle: Class Component vs Functional Component","description":"","date":"2021-05-06T11:00:00.000Z","formattedDate":"6 Mei 2021","tags":[{"label":"Frontend Development","permalink":"/tags/frontend-development"},{"label":"Beginner Frontend","permalink":"/tags/beginner-frontend"},{"label":"ReactJS","permalink":"/tags/react-js"}],"readingTime":2.775,"hasTruncateMarker":true,"authors":[{"name":"Irul","title":"JavaScript Enthusiast","url":"https://github.com/fulsep","imageURL":"https://github.com/fulsep.png","key":"irul"}],"frontMatter":{"slug":"perbedaan-lifecycle-react-pada-class-component-dan-functional-component","title":"React Lifecycle: Class Component vs Functional Component","authors":["irul"],"tags":["Frontend Development","Beginner Frontend","ReactJS"],"date":"2021-05-06T11:00"},"prevItem":{"title":"Upload file dengan ReactJS dan axios","permalink":"/upload-file-dengan-reactjs-dan-axios"},"nextItem":{"title":"Apa itu State pada React Component?","permalink":"/apa-itu-state-pada-react-component"}},"content":"import ImageCenterize from \'../src/components/ImageCenterize.js\';\\r\\nimport Link from \'@docusaurus/Link\';\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/react.png\\" alt=\\"react\\" />\\r\\n\\r\\nKita terkadang bingung dengan cara kerja dari perenderan komponen pada class component dan functional component, akan tetapi jika kita telaah lebih jauh ternyata perbedaannya hanya pada penggunaan lifecycle nya saja.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Perbedaan utama\\r\\n\\r\\nPerbedaan utama antara lifecycle pada class component dan functional component menggunakan hooks adalah bahwa class component menggunakan metode lifecycle seperti componentDidMount, componentDidUpdate, dan componentWillUnmount, sementara functional component menggunakan hooks seperti useEffect untuk menangani masalah yang sama. Namun, dengan hooks, kita dapat menulis kode yang lebih terstruktur dan terlihat lebih sederhana.\\r\\n\\r\\nDi bawah ini adalah contoh perbedaan antara lifecycle pada class component dan functional component menggunakan hooks:\\r\\n\\r\\nPada Class Component:\\r\\n\\r\\n```jsx\\r\\nclass Example extends React.Component {\\r\\n  componentDidMount() {\\r\\n    // kode untuk menjalankan saat component telah di-mount\\r\\n  }\\r\\n  \\r\\n  componentDidUpdate(prevProps, prevState) {\\r\\n    // kode untuk menjalankan saat component telah di-update\\r\\n  }\\r\\n  \\r\\n  componentWillUnmount() {\\r\\n    // kode untuk menjalankan saat component akan di-unmount\\r\\n  }\\r\\n  \\r\\n  render() {\\r\\n    return <div>Example</div>;\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nPada Functional Component + Hooks:\\r\\n\\r\\n```jsx\\r\\nfunction Example() {\\r\\n  useEffect(() => {\\r\\n    // kode untuk menjalankan saat component telah di-mount\\r\\n    // atau setelah component di-update\\r\\n    return () => {\\r\\n      // kode untuk menjalankan saat component akan di-unmount\\r\\n    }\\r\\n  }, []);\\r\\n  \\r\\n  return <div>Example</div>;\\r\\n}\\r\\n```\\r\\n\\r\\nPada functional component dengan hooks, kita dapat menggunakan useEffect untuk menjalankan kode saat component di-mount dan di-update, serta mengembalikan sebuah fungsi untuk menjalankan kode saat component di-unmount. Sedangkan pada class component kita menggunakan metode lifecycle yang berbeda untuk menjalankan kode pada saat yang berbeda.\\r\\n\\r\\n## Dependensi pada useEffect\\r\\n\\r\\nJika kita perhatikan, pada parameter kedua useEffect setelah callback pada contoh diatas, ada array kosong, itulah yang kita sebut sebagai Dependensi pada useEffect.\\r\\n\\r\\nDependensi pada useEffect adalah sebuah daftar yang berisi variabel yang digunakan dalam efek itu. Setiap kali nilai variabel tersebut berubah, React akan memanggil efek itu kembali. Jika Anda tidak menyertakan daftar dependensi, React akan memanggil efek itu setiap kali component di-render.\\r\\n\\r\\nContoh:\\r\\n```jsx\\r\\nconst [count, setCount] = useState(0);\\r\\n\\r\\nuseEffect(() => {\\r\\n  console.log(`Count: ${count}`);\\r\\n}, [count]);\\r\\n```\\r\\n\\r\\nDalam contoh di atas, efek akan dijalankan setiap kali nilai dari variabel count berubah. Karena dependensi hanya menyertakan count, React tidak akan memanggil efek itu kembali jika hanya mengubah state lain.\\r\\n\\r\\nDependensi juga dapat digunakan untuk mengawasi perubahan pada props.\\r\\n\\r\\n```jsx\\r\\nfunction Component({id}) {\\r\\n  useEffect(() => {\\r\\n    fetchData(id);\\r\\n  }, [id]);\\r\\n  return <div>Data: {data}</div>;\\r\\n}\\r\\n```\\r\\n\\r\\nKode di atas akan memanggil fetchData saat id berubah. Jika tidak menyertakan dependensi, fetchData akan dipanggil setiap kali component di-render.\\r\\n\\r\\nJika tidak ingin mengawasi perubahan pada suatu variabel, bisa menyertakan dependensi dengan nilai kosong.\\r\\n\\r\\n```jsx\\r\\nuseEffect(() => {\\r\\n  console.log(\\"Component did mount\\");\\r\\n}, []);\\r\\n```\\r\\n\\r\\nKode di atas akan menjalankan efek hanya saat component di-mount.\\r\\n\\r\\n## Kesimpulan\\r\\n\\r\\nKesimpulannya, React menyediakan metode lifecycle pada class component dan hooks pada functional component untuk menangani peristiwa seperti mount, update, dan unmount. Class component menggunakan metode lifecycle seperti componentDidMount, componentDidUpdate, dan componentWillUnmount. Sedangkan functional component menggunakan hooks seperti useEffect untuk menangani masalah yang sama.\\r\\n\\r\\nuseEffect sendiri adalah hook yang digunakan untuk menjalankan kode saat component di-mount dan di-update, serta mengembalikan sebuah fungsi untuk menjalankan kode saat component di-unmount. Dependensi pada useEffect adalah sebuah daftar yang berisi variabel yang digunakan dalam efek itu, setiap kali nilai variabel tersebut berubah, React akan memanggil efek itu kembali. Dengan menggunakan dependensi, kita dapat mengontrol kapan efek itu dijalankan dan menghindari efek yang tidak diinginkan.\\r\\n\\r\\nSemoga Bermanfaat!"},{"id":"apa-itu-state-pada-react-component","metadata":{"permalink":"/apa-itu-state-pada-react-component","source":"@site/blog/2023-01-21-001-apa-itu-state-pada-react-component.mdx","title":"Apa itu State pada React Component?","description":"","date":"2021-05-05T11:00:00.000Z","formattedDate":"5 Mei 2021","tags":[{"label":"Frontend Development","permalink":"/tags/frontend-development"},{"label":"Beginner Frontend","permalink":"/tags/beginner-frontend"},{"label":"ReactJS","permalink":"/tags/react-js"}],"readingTime":5.16,"hasTruncateMarker":true,"authors":[{"name":"Irul","title":"JavaScript Enthusiast","url":"https://github.com/fulsep","imageURL":"https://github.com/fulsep.png","key":"irul"}],"frontMatter":{"slug":"apa-itu-state-pada-react-component","title":"Apa itu State pada React Component?","authors":["irul"],"tags":["Frontend Development","Beginner Frontend","ReactJS"],"date":"2021-05-05T11:00"},"prevItem":{"title":"React Lifecycle: Class Component vs Functional Component","permalink":"/perbedaan-lifecycle-react-pada-class-component-dan-functional-component"},"nextItem":{"title":"Part 2 - Nodemailer dengan Gmail OAuth2","permalink":"/nodemailer-dengan-gmail-oauth2-2"}},"content":"import ImageCenterize from \'../src/components/ImageCenterize.js\';\\r\\nimport Link from \'@docusaurus/Link\';\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/react.png\\" alt=\\"react\\" />\\r\\n\\r\\nState adalah sebuah objek yang digunakan dalam komponen React untuk menyimpan data yang dapat diubah-ubah. State digunakan untuk mengontrol kondisi dan perilaku komponen dan dapat digunakan untuk mengubah tampilan komponen. State dapat diubah melalui fungsi `setState()` yang disediakan oleh React, yang akan memicu render ulang komponen dengan state yang baru.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n## Hal penting tentang React state\\r\\n\\r\\nAda beberapa hal yang perlu diketahui tentang state di React:\\r\\n\\r\\n1. State hanya dapat digunakan dalam komponen yang diturunkan dari React.Component.\\r\\n2. State harus diinisialisasi saat komponen dibuat, biasanya dalam konstruktor komponen.\\r\\n3. State tidak boleh diubah secara langsung, tetapi harus menggunakan fungsi `setState()` yang disediakan oleh React.\\r\\n4. Setiap kali state diubah, React akan menjalankan render ulang komponen untuk menampilkan perubahan.\\r\\n5. State dapat digunakan untuk mengontrol perilaku komponen, seperti menampilkan atau menyembunyikan elemen, atau untuk menyimpan data yang diterima dari server.\\r\\n6. State yang di-passing dari komponen parent ke komponen child melalui props. Namun, state yang di-passing dari child ke parent harus melalui callback function yang didefinisikan di parent.\\r\\n\\r\\n## Contoh implementasi React state\\r\\n\\r\\nUntuk membuat state di class component React, kita harus menggunakan konstruktor komponen untuk menginisialisasi state. Di dalam konstruktor, kita dapat menetapkan nilai awal state dengan menetapkan properti this.state dengan objek yang berisi data yang ingin kita simpan. Sebagai contoh:\\r\\n\\r\\n```jsx\\r\\nclass MyComponent extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      count: 0,\\r\\n      message: \\"Hello\\"\\r\\n    };\\r\\n  }\\r\\n  // ...\\r\\n}\\r\\n```\\r\\n\\r\\nDi atas adalah contoh komponen yang memiliki state yang diinisialisasi dengan properti count dengan nilai 0 dan message dengan nilai \\"Hello\\". Kita dapat mengakses state dari dalam komponen dengan menggunakan `this.state`.\\r\\n\\r\\nJika kita menginginkan class component menjadi functional component, kita dapat menggunakan hook `useState` untuk membuat state.\\r\\n\\r\\n```jsx\\r\\nimport { useState } from \'react\';\\r\\n\\r\\nfunction MyComponent(props) {\\r\\n  const [count, setCount] = useState(0);\\r\\n  const [message, setMessage] = useState(\\"Hello\\");\\r\\n  // ...\\r\\n}\\r\\n```\\r\\n\\r\\nDi atas adalah contoh component yang memiliki state yang diinisialisasi dengan properti count dengan nilai 0 dan message dengan nilai \\"Hello\\" dengan menggunakan hook `useState`.\\r\\n\\r\\n## Menggunakan state pada komponen input\\r\\n\\r\\nUntuk menggunakan state pada input komponen, kita harus menyimpan nilai input dalam state dan mengupdate state saat nilai input berubah.\\r\\n\\r\\nPada class component, kita dapat menggunakan onChange event pada input untuk mengupdate state saat nilai input berubah. Kita dapat mengatur properti value dari input ke `this.state.inputValue` dan mengatur `onChange` untuk menjalankan `this.handleChange` yang akan memanggil `setState()` untuk mengupdate state.\\r\\n\\r\\n```jsx\\r\\nclass MyInput extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      inputValue: \\"\\"\\r\\n    };\\r\\n    this.handleChange = this.handleChange.bind(this);\\r\\n  }\\r\\n\\r\\n  handleChange(event) {\\r\\n    this.setState({ inputValue: event.target.value });\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <input\\r\\n        value={this.state.inputValue}\\r\\n        onChange={this.handleChange}\\r\\n      />\\r\\n    );\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nPada functional component, kita dapat menggunakan hook `useState` untuk menyimpan nilai input dalam state dan mengupdate state saat nilai input berubah. Kita dapat mengatur properti value dari input ke `inputValue` dan mengatur `onChange` untuk menjalankan `handleChange` yang akan memanggil `setInputValue` untuk mengupdate state.\\r\\n\\r\\n```jsx\\r\\nimport { useState } from \'react\';\\r\\n\\r\\nfunction MyInput() {\\r\\n  const [inputValue, setInputValue] = useState(\\"\\");\\r\\n\\r\\n  function handleChange(event) {\\r\\n    setInputValue(event.target.value);\\r\\n  }\\r\\n\\r\\n  return (\\r\\n    <input\\r\\n      value={inputValue}\\r\\n      onChange={handleChange}\\r\\n    />\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n## Menggunakan state untuk conditional rendering\\r\\n\\r\\nKita dapat menggunakan state untuk mengontrol kondisi rendering pada komponen React. Misalnya, jika kita ingin menampilkan atau menyembunyikan elemen berdasarkan kondisi tertentu, kita dapat menggunakan state untuk menyimpan kondisi tersebut dan menggunakannya dalam logika pada `render()` method untuk menentukan apa yang harus ditampilkan.\\r\\n\\r\\nPada class component, kita dapat menggunakan if-else statement atau ternary operator untuk mengontrol kondisi rendering. Sebagai contoh:\\r\\n\\r\\n```jsx\\r\\nclass MyComponent extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      showMessage: true\\r\\n    };\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n        {this.state.showMessage ? <p>Hello</p> : null}\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nPada contoh di atas, komponen akan menampilkan elemen `<p>Hello</p>` jika `showMessage` di state bernilai `true`. Jika `false`, maka tidak akan tampil apapun.\\r\\n\\r\\nPada functional component, kita dapat menggunakan if-statement atau ternary operator untuk mengontrol kondisi rendering. Sebagai contoh:\\r\\n\\r\\n```jsx\\r\\nimport { useState } from \'react\';\\r\\n\\r\\nfunction MyComponent() {\\r\\n  const [showMessage, setShowMessage] = useState(true);\\r\\n  return (\\r\\n    <div>\\r\\n      {showMessage ? <p>Hello</p> : null}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n## Menggunakan state untuk menyimpan data dari axios request\\r\\n\\r\\nKita dapat menggunakan state untuk menyimpan data yang didapat dari request axios. Pertama, kita harus mengimpor library axios dan membuat request ke endpoint yang diinginkan.\\r\\n\\r\\nPada class component, kita dapat menggunakan lifecycle method `componentDidMount()` untuk mengirim request dan mengupdate state dengan data yang didapat. Sebagai contoh:\\r\\n\\r\\n```jsx\\r\\nimport axios from \'axios\';\\r\\n\\r\\nclass MyComponent extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      data: null\\r\\n    };\\r\\n  }\\r\\n\\r\\n  componentDidMount() {\\r\\n    axios.get(\\"https://your-api-endpoint.com/data\\")\\r\\n    .then(response => {\\r\\n      this.setState({ data: response.data });\\r\\n    });\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n        {this.state.data ? <p>Data: {this.state.data}</p> : <p>Loading...</p>}\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nPada functional component, Anda dapat menggunakan hook useEffect untuk mengirim request dan mengupdate state dengan data yang didapat. Sebagai contoh:\\r\\n\\r\\n```jsx\\r\\nimport { useState, useEffect } from \'react\';\\r\\nimport axios from \'axios\';\\r\\n\\r\\nfunction MyComponent() {\\r\\n  const [data, setData] = useState(null);\\r\\n\\r\\n  useEffect(() => {\\r\\n    axios.get(\\"https://your-api-endpoint.com/data\\")\\r\\n    .then(response => {\\r\\n      setData(response.data);\\r\\n    });\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      {data ? <p>Data: {data}</p> : <p>Loading...</p>}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\n### Menggunakan async-await\\r\\n\\r\\nKita dapat menggunakan async-await untuk mengirim request axios dan menyimpan data yang didapat dalam state. Ini dapat membuat kode kita lebih mudah dibaca dan diatur.\\r\\n\\r\\nPada class component berikut contohnya:\\r\\n```jsx\\r\\nimport axios from \'axios\';\\r\\n\\r\\nclass MyComponent extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      data: null\\r\\n    };\\r\\n  }\\r\\n\\r\\n  async componentDidMount() {\\r\\n    try {\\r\\n      const response = await axios.get(\\"https://your-api-endpoint.com/data\\");\\r\\n      this.setState({ data: response.data });\\r\\n    } catch (error) {\\r\\n      console.log(error);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return (\\r\\n      <div>\\r\\n        {this.state.data ? <p>Data: {this.state.data}</p> : <p>Loading...</p>}\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n```\\r\\n\\r\\nJika implementasinya menggunakan functional component, berikut contohnya:\\r\\n```jsx\\r\\nimport { useState, useEffect } from \'react\';\\r\\nimport axios from \'axios\';\\r\\n\\r\\nfunction MyComponent() {\\r\\n  const [data, setData] = useState(null);\\r\\n\\r\\n  useEffect(() => {\\r\\n    const fetchData = async () => {\\r\\n      try {\\r\\n        const response = await axios.get(\\"https://your-api-endpoint.com/data\\");\\r\\n        setData(response.data);\\r\\n      } catch (error) {\\r\\n        console.log(error);\\r\\n      }\\r\\n    };\\r\\n\\r\\n    fetchData();\\r\\n  }, []);\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      {data ? <p>Data: {data}</p> : <p>Loading...</p>}\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n```\\r\\n\\r\\nSekian tulisan kita kali ini, untuk lebih realistisnya kita bisa mencoba beberapa kode diatas langsung menggunakan repl atau menuliskannya di project lokal yang sedang kita kerjakan.\\r\\n\\r\\nSemoga Bermanfaat!"},{"id":"nodemailer-dengan-gmail-oauth2-2","metadata":{"permalink":"/nodemailer-dengan-gmail-oauth2-2","source":"@site/blog/2022-12-24-002-nodemailer-dengan-gmail-oauth2.mdx","title":"Part 2 - Nodemailer dengan Gmail OAuth2","description":"","date":"2021-05-04T11:00:00.000Z","formattedDate":"4 Mei 2021","tags":[{"label":"Backend Development","permalink":"/tags/backend-development"},{"label":"JavaScript for Backend","permalink":"/tags/java-script-for-backend"},{"label":"Nodemailer","permalink":"/tags/nodemailer"}],"readingTime":2.29,"hasTruncateMarker":true,"authors":[{"name":"Irul","title":"JavaScript Enthusiast","url":"https://github.com/fulsep","imageURL":"https://github.com/fulsep.png","key":"irul"}],"frontMatter":{"slug":"nodemailer-dengan-gmail-oauth2-2","title":"Part 2 - Nodemailer dengan Gmail OAuth2","authors":["irul"],"tags":["Backend Development","JavaScript for Backend","Nodemailer"],"date":"2021-05-04T11:00"},"prevItem":{"title":"Apa itu State pada React Component?","permalink":"/apa-itu-state-pada-react-component"},"nextItem":{"title":"Part 1 - Nodemailer dengan Gmail OAuth2","permalink":"/nodemailer-dengan-gmail-oauth2-1"}},"content":"import ImageCenterize from \'../src/components/ImageCenterize.js\';\\r\\nimport Link from \'@docusaurus/Link\';\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/mail.png\\" alt=\\"mail\\" />\\r\\n\\r\\nPada tulisan <Link to=\\"/nodemailer-dengan-gmail-oauth2-1\\">sebelumnya</Link> kita sudah mendapatkan OAuth Client ID, OAuth Client Secret dan juga Refresh Token untuk digunakan pada nodemailer.\\r\\n\\r\\nDi tulisan kali ini kita akan melakukan implementasi untuk nodemailer pada nodejs.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nUntuk menggunakan nodemailer kita perlu untuk memasang modul **nodemailer** dan juga **googleapis** dengan menjalankan perintah berikut pada project kita\\r\\n\\r\\n```sh\\r\\nnpm install nodemailer googleapis\\r\\n```\\r\\n\\r\\nBiasanya saya membuat satu file baru, dengan postfix helper untuk membantu saya kedepannya jika ingin mengirimkan email, tinggal panggil saja helper ini\\r\\n\\r\\n\\r\\nKita import seluruh modul yang akan kita gunakan di helper ini\\r\\n\\r\\n```js\\r\\n// mail.helper.js\\r\\n\\r\\nconst nodemailer = require(\'nodemailer\');\\r\\nconst {google} = require(\'googleapis\');\\r\\nconst OAuth2 = google.auth.OAuth2;\\r\\n\\r\\n//...\\r\\n\\r\\n```\\r\\n\\r\\nLalu kita coba konfigurasi OAuth Client ID, OAuth Client Secret dan juga Refresh Token yang sudah kita dapatkan sebelumnya\\r\\n\\r\\n```js\\r\\n// mail.helper.js\\r\\n\\r\\n//...\\r\\n\\r\\nconst GMAIL_EMAIL_ADDRESS = \'\'; // masukkan email yang digunakan pada GCC\\r\\nconst GMAIL_CLIENT_ID = \'\'; // masukkan client id disini\\r\\nconst GMAIL_CLIENT_SECRET = \'\'; // masukkan client secret disini\\r\\nconst GMAIL_REFRESH_TOKEN = \'\'; // masukkan refresh token disini\\r\\nconst GMAIL_CALLBACK_URI = \'https://developers.google.com/oauthplayground\';\\r\\n\\r\\nconst oauth2Client = new OAuth2(\\r\\n  GMAIL_CLIENT_ID,\\r\\n  GMAIL_CLIENT_SECRET,\\r\\n  GMAIL_CALLBACK_URI\\r\\n);\\r\\n\\r\\noauth2Client.setCredentials({\\r\\n    refresh_token: GMAIL_REFRESH_TOKEN\\r\\n});\\r\\n\\r\\n//...\\r\\n\\r\\n```\\r\\n\\r\\nSelanjutnya, kita buat method transport dari nodemailer.createTransport untuk mengirimkan email menggunakan nodemailer\\r\\n\\r\\n```js\\r\\n// mail.helper.js\\r\\n\\r\\n//...\\r\\n\\r\\nconst transport = async () => {\\r\\n  const accessToken = await oauth2Client.getAccessToken();\\r\\n  \\r\\n  return nodemailer.createTransport({\\r\\n    service: \'gmail\',\\r\\n    auth: {\\r\\n      type: \'OAuth2\',\\r\\n      user: GMAIL_EMAIL_ADDRESS,\\r\\n      clientId: GMAIL_CLIENT_ID,\\r\\n      clientSecret: GMAIL_CLIENT_SECRET,\\r\\n      refreshToken: GMAIL_REFRESH_TOKEN,\\r\\n      accessToken: accessToken.token,\\r\\n    },\\r\\n  });\\r\\n  \\r\\n};\\r\\n\\r\\nmodule.exports = transport\\r\\n\\r\\n```\\r\\n\\r\\nKode lengkapnya untuk ```mail.helper.js``` dibawah ini\\r\\n\\r\\n```js\\r\\n// mail.helper.js\\r\\n\\r\\nconst nodemailer = require(\'nodemailer\');\\r\\nconst { google } = require(\'googleapis\');\\r\\nconst OAuth2 = google.auth.OAuth2;\\r\\n\\r\\nconst GMAIL_EMAIL_ADDRESS = \'\'; // masukkan email yang digunakan pada GCC\\r\\nconst GMAIL_CLIENT_ID = \'\'; // masukkan client id disini\\r\\nconst GMAIL_CLIENT_SECRET = \'\'; // masukkan client secret disini\\r\\nconst GMAIL_REFRESH_TOKEN = \'\'; // masukkan refresh token disini\\r\\nconst GMAIL_CALLBACK_URI = \'https://developers.google.com/oauthplayground\';\\r\\n\\r\\nconst oauth2Client = new OAuth2(\\r\\n  GMAIL_CLIENT_ID,\\r\\n  GMAIL_CLIENT_SECRET,\\r\\n  GMAIL_CALLBACK_URI\\r\\n);\\r\\n\\r\\noauth2Client.setCredentials({\\r\\n    refresh_token: GMAIL_REFRESH_TOKEN\\r\\n});\\r\\n\\r\\nconst transport = async () => {\\r\\n  const accessToken = await oauth2Client.getAccessToken();\\r\\n  \\r\\n  return nodemailer.createTransport({\\r\\n    service: \'gmail\',\\r\\n    auth: {\\r\\n      type: \'OAuth2\',\\r\\n      user: GMAIL_EMAIL_ADDRESS,\\r\\n      clientId: GMAIL_CLIENT_ID,\\r\\n      clientSecret: GMAIL_CLIENT_SECRET,\\r\\n      refreshToken: GMAIL_REFRESH_TOKEN,\\r\\n      accessToken: accessToken.token,\\r\\n    },\\r\\n  });\\r\\n  \\r\\n};\\r\\n\\r\\nmodule.exports = transport\\r\\n\\r\\n```\\r\\n\\r\\nDan untuk menggunakan helper diatas kita tinggal import method transport dari ```mail.helper.js```\\r\\n\\r\\n```js\\r\\n// penggunaan.js\\r\\n\\r\\nconst transport = require(\'./mail.helper.js\');\\r\\n\\r\\nconst mailOptions = {\\r\\n    from: \'sender@gmail.com\', // pengirim (email kita sebelumnya)\\r\\n    to: \'recipient@gmail.com\', // penerima email\\r\\n    subject: \'Contoh Email\', // subject email\\r\\n    html: `<p>Hello! Ini adalah email test</p>`, // html body\\r\\n}\\r\\n\\r\\nconst sendMail = async () => {\\r\\n    try{\\r\\n        const mailer = await transport();\\r\\n        await mailer.sendMail(mailOptions);\\r\\n        console.log(\'Email terkirim!\');\\r\\n    }catch(err){\\r\\n        console.log(err);\\r\\n        console.log(\'Gagal!\');\\r\\n    }\\r\\n}\\r\\n\\r\\nsendMail();\\r\\n\\r\\n```\\r\\n\\r\\nNah, jadi begitu cara untuk mengirimkan email dengan Nodemailer dan Gmail OAuth2.\\r\\n\\r\\nSemoga Bermanfaat!"},{"id":"nodemailer-dengan-gmail-oauth2-1","metadata":{"permalink":"/nodemailer-dengan-gmail-oauth2-1","source":"@site/blog/2022-12-24-001-nodemailer-dengan-gmail-oauth2.mdx","title":"Part 1 - Nodemailer dengan Gmail OAuth2","description":"","date":"2021-05-04T10:00:00.000Z","formattedDate":"4 Mei 2021","tags":[{"label":"Backend Development","permalink":"/tags/backend-development"},{"label":"JavaScript for Backend","permalink":"/tags/java-script-for-backend"},{"label":"Nodemailer","permalink":"/tags/nodemailer"}],"readingTime":2.975,"hasTruncateMarker":true,"authors":[{"name":"Irul","title":"JavaScript Enthusiast","url":"https://github.com/fulsep","imageURL":"https://github.com/fulsep.png","key":"irul"}],"frontMatter":{"slug":"nodemailer-dengan-gmail-oauth2-1","title":"Part 1 - Nodemailer dengan Gmail OAuth2","authors":["irul"],"tags":["Backend Development","JavaScript for Backend","Nodemailer"],"date":"2021-05-04T10:00"},"prevItem":{"title":"Part 2 - Nodemailer dengan Gmail OAuth2","permalink":"/nodemailer-dengan-gmail-oauth2-2"},"nextItem":{"title":"Axios Untuk Pemula","permalink":"/axios-untuk-pemula"}},"content":"import ImageCenterize from \'../src/components/ImageCenterize.js\';\\r\\nimport Link from \'@docusaurus/Link\';\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/mail.png\\" alt=\\"mail\\" />\\r\\n\\r\\nNodemailer adalah modul JavaScript yang bisa kita manfaatkan untuk mengirimkan pesan email dengan mengkonfigurasi SMTP dari email server yang kita miliki.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nTapi sayangnya, seringkali dalam masa development kita hanya fokus untuk melihat bagaimana email yang kita kirim dari server diterima oleh pengguna, jadi kita belum memiliki mail server yang mungkin harganya tidak murah.\\r\\n\\r\\nBeruntungnya Gmail menyediakan opsi untuk mengirimkan email melalui server mereka secara programmatically, kita bisa memanfaatkannya untuk sementara waktu. Karena dihilangkannya opsi \\"Less secure apps\\" pada akun google, kita bisa memanfaatkan cara lain, yakni dengan menggunakan OAuth2.\\r\\n\\r\\nPada tulisan bagian pertama ini, kita akan melakukan konfigurasi project pada Google Cloud Console, berikut cara konfigurasinya:\\r\\n\\r\\nMasuk ke <Link to=\\"https://console.cloud.google.com/getting-started?pli=1\\">Google Cloud Console</Link> dan buatlah project baru\\r\\n\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/1.png\\" alt=\\"step 1\\" />\\r\\n\\r\\nKlik ikon hamburger menu, pilih API Library\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/2-1.png\\" alt=\\"step 2-1\\" />\\r\\n\\r\\nMasukkan Gmail pada kolom pencarian\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/2-2.png\\" alt=\\"step 2-2\\" />\\r\\n\\r\\nPilih Gmail API\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/2-3.png\\" alt=\\"step 2-3\\" />\\r\\n\\r\\nTekan Enable\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/2-4.png\\" alt=\\"step 2-4\\" />\\r\\n\\r\\nSelanjutnya, masuk ke menu **APIs & Services** pilih **OAuth consent screen**\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/2.png\\" alt=\\"step 2\\" />\\r\\n\\r\\nPilih **External** dan tekan Create\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/3.png\\" alt=\\"step 3\\" />\\r\\n\\r\\nMasukkan **App name**, bebas. Disini saya masukkan **Nodemailer**, dan pilih **User support email** dari dropdown yang disediakan\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/4.png\\" alt=\\"step 4\\" />\\r\\n\\r\\nScroll kebawah sedikit disana akan ada kolom untuk email, isi dengan email anda dan tekan Save and Continue\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/5.png\\" alt=\\"step 5\\" />\\r\\n\\r\\nSelanjutnya, Tekan Add or Remove Scope\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/6.png\\" alt=\\"step 6\\" />\\r\\n\\r\\nPada kolom filter masukkan Gmail dan pilih Gmail API\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/6-1.png\\" alt=\\"step 6-1\\" />\\r\\n\\r\\nLalu centang Gmail API dan tekan Update\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/6-2.png\\" alt=\\"step 6-2\\" />\\r\\n\\r\\nJika pada section **Your restricted scope** sudah ada Gmail Scope, tekan Save and Continue\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/6-3.png\\" alt=\\"step 6-3\\" />\\r\\n\\r\\nTekan add user pada section Test users\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/6-4.png\\" alt=\\"step 6-4\\" />\\r\\n\\r\\nMasukkan email dari akun google yang sedang dipakai, lalu tekan Save and Continue\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/6-5.png\\" alt=\\"step 6-5\\" />\\r\\n\\r\\nKembali ke menu, pilih Credentials\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/7.png\\" alt=\\"step 7\\" />\\r\\n\\r\\nKlik Create Credentials dan pilih OAuth Client ID\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/8.png\\" alt=\\"step 8\\" />\\r\\n\\r\\nPilih Web Application untuk Application Type dan Name diisi bebas, disini saya masukkan Nodemailer\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/9.png\\" alt=\\"step 9\\" />\\r\\n\\r\\nPada section Autorized redirect URIs masukkan:\\r\\n\\r\\n```\\r\\nhttps://developers.google.com/oauthplayground\\r\\n```\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/10.png\\" alt=\\"step 10\\" />\\r\\n\\r\\nSimpan Client ID dan Client Secret untuk dipakai selanjutnya di OAuth Playground\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/11.png\\" alt=\\"step 11\\" />\\r\\n\\r\\nMasuk ke <Link to=\\"https://developers.google.com/oauthplayground\\">OAuth 2.0 Playground</Link> dan pilih ikon gear pada samping kanan atas, centang **Use your own OAuth credentials** dan masukkan Client ID dan Client Secret yang sebelumnya kita dapatkan, lalu klik Close.\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/12.png\\" alt=\\"step 12\\" />\\r\\n\\r\\nPada Step 1 bagian kanan Playground, cari Gmail API v1 dan centang `https://mail.google.com/`, lalu tekan Authorize APIs\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/13.png\\" alt=\\"step 13\\" />\\r\\n\\r\\nKita akan dialihkan ke halaman Authorization, pilih akun sedang kita pakai\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/14.png\\" alt=\\"step 14\\" />\\r\\n\\r\\nAkan muncul alert seperti berikut, kita bisa menekan Continue saja\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/15.png\\" alt=\\"step 15\\" />\\r\\n\\r\\nLalu tekan Continue lagi\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/16.png\\" alt=\\"step 16\\" />\\r\\n\\r\\nNantinya, kita akan dikembalikan ke halaman playground Step 2 dengan Authorization Code yang sudah terisi, Tekan **Exchange authorization code for tokens**\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/17.png\\" alt=\\"step 17\\" />\\r\\n\\r\\nKolom refresh token akan terisi dan kita bisa simpan, karena ini akan kita gunakan di nodemailer pada tulisan bagian berikutnya.\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/nodemailer-dengan-gmail-oauth2/18.png\\" alt=\\"step 18\\" />\\r\\n\\r\\nWrap up:\\r\\n\\r\\nJadi, pada bagian pertama ini kita sudah mendapatkan OAuth Client ID, OAuth Client Secret dan juga Refresh Token yang bisa kita gunakan pada nodemailer, untuk selanjutnya kita bisa lihat di bagian kedua\\r\\n\\r\\n<Link to=\\"/nodemailer-dengan-gmail-oauth2-2\\">Part 2 - Nodemailer dengan Gmail OAuth2</Link>"},{"id":"axios-untuk-pemula","metadata":{"permalink":"/axios-untuk-pemula","source":"@site/blog/2022-12-21-001-axios-untuk-pemula.mdx","title":"Axios Untuk Pemula","description":"","date":"2021-05-03T10:00:00.000Z","formattedDate":"3 Mei 2021","tags":[{"label":"Frontend Development","permalink":"/tags/frontend-development"},{"label":"ReactJS","permalink":"/tags/react-js"},{"label":"JavaScript for Frontend","permalink":"/tags/java-script-for-frontend"},{"label":"Beginner Frontend","permalink":"/tags/beginner-frontend"}],"readingTime":2.255,"hasTruncateMarker":true,"authors":[{"name":"Irul","title":"JavaScript Enthusiast","url":"https://github.com/fulsep","imageURL":"https://github.com/fulsep.png","key":"irul"}],"frontMatter":{"slug":"axios-untuk-pemula","title":"Axios Untuk Pemula","authors":["irul"],"tags":["Frontend Development","ReactJS","JavaScript for Frontend","Beginner Frontend"],"date":"2021-05-03T10:00"},"prevItem":{"title":"Part 1 - Nodemailer dengan Gmail OAuth2","permalink":"/nodemailer-dengan-gmail-oauth2-1"},"nextItem":{"title":"Selamat Datang!","permalink":"/selamat-datang"}},"content":"import ImageCenterize from \'../src/components/ImageCenterize.js\';\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/link.png\\" alt=\\"link\\" />\\r\\n\\r\\nAxios adalah sebuah library JavaScript yang memungkinkan kita untuk mengirim HTTP request (misalnya, untuk mengambil data dari sebuah API atau untuk mengirim data ke API) ke server.\\r\\n\\r\\nAxios memudahkan kita untuk melakukan operasi HTTP tanpa harus menggunakan fitur built-in browser seperti XMLHttpRequest atau fetch.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nUntuk menggunakan Axios, pertama-tama kita perlu memasangnya di proyek yang sedang kita kerjakan. Kita dapat melakukannya dengan menjalankan perintah npm (jika kita menggunakan npm) atau yarn (jika kita menggunakan yarn) berikut:\\r\\n\\r\\n```sh\\r\\nnpm install axios\\r\\n```\\r\\natau\\r\\n\\r\\n```sh\\r\\nyarn add axios\\r\\n```\\r\\n\\r\\nSetelah Axios terpasang, kita dapat mengimpor library tersebut di dalam proyek kita dengan cara seperti ini:\\r\\n\\r\\n```js\\r\\nimport axios from \'axios\';\\r\\n```\\r\\n\\r\\nAtau, jika kita tidak menggunakan ES6 import, kita dapat menggunakan require:\\r\\n\\r\\n```js\\r\\nconst axios = require(\'axios\');\\r\\n```\\r\\n\\r\\nSetelah Axios terpasang dan diimpor ke dalam proyek kita, kita dapat mulai menggunakannya untuk mengirim HTTP request. Berikut adalah contoh sederhana untuk mengirim request GET ke sebuah API:\\r\\n\\r\\n```js\\r\\naxios.get(\'https://api.example.com/endpoint\')\\r\\n  .then(response => {\\r\\n    // handling sukses\\r\\n  })\\r\\n  .catch(error => {\\r\\n    // handling error\\r\\n  });\\r\\n```\\r\\n\\r\\nRequest GET di atas akan mengirim HTTP request ke alamat URL yang diberikan, dan kemudian akan memanggil callback then jika request tersebut berhasil, atau memanggil callback catch jika terjadi error.\\r\\n\\r\\nKita juga dapat menambahkan parameter ke request GET dengan cara seperti ini:\\r\\n\\r\\n```js\\r\\naxios.get(\'https://api.example.com/endpoint\', {\\r\\n  params: {\\r\\n    key1: \'value1\',\\r\\n    key2: \'value2\'\\r\\n  }\\r\\n})\\r\\n  .then(response => {\\r\\n    // handling sukses\\r\\n  })\\r\\n  .catch(error => {\\r\\n    // handling error\\r\\n  });\\r\\n```\\r\\n\\r\\nUntuk mengirim request POST, kita dapat menggunakan metode post yang sama seperti get, namun dengan menambahkan data yang akan dikirim ke server sebagai argument kedua:\\r\\n\\r\\n```js\\r\\naxios.post(\'https://api.example.com/endpoint\', {\\r\\n    key1: \'value1\',\\r\\n    key2: \'value2\'\\r\\n})\\r\\n  .then(response => {\\r\\n    // handling sukses\\r\\n  })\\r\\n  .catch(error => {\\r\\n    // handling error\\r\\n  });\\r\\n```\\r\\n\\r\\nRequest POST di atas akan mengirimkan dalam bentuk application/json, jika kita ingin mengirimkan request dalam bentuk application/x-www-form-urlencoded kita dapat menuliskannya dengan cara berikut:\\r\\n\\r\\n```js\\r\\nconst form = new URLSearchParams();\\r\\nform.append(\'param1\', \'value1\');\\r\\nform.append(\'param2\', \'value2\');\\r\\n\\r\\naxios.post(\'https://api.example.com/endpoint\', form)\\r\\n  .then(response => {\\r\\n    // handling sukses\\r\\n  })\\r\\n  .catch(error => {\\r\\n    // handling error\\r\\n  });\\r\\n```\\r\\n\\r\\nKita juga dapat menambahkan pengaturan tambahan seperti headers atau timeout kedalam request dengan menambahkan objek konfigurasi sebagai argumen ketiga ke metode post:\\r\\n\\r\\n```js\\r\\naxios.post(\'https://api.example.com/endpoint\', {\\r\\n  key1: \'value1\',\\r\\n  key2: \'value2\'\\r\\n}, {\\r\\n  headers: {\\r\\n    \'Content-Type\': \'application/json\'\\r\\n  },\\r\\n  timeout: 1000\\r\\n})\\r\\n  .then(response => {\\r\\n    // handling sukses\\r\\n  })\\r\\n  .catch(error => {\\r\\n    // handling error\\r\\n  });\\r\\n```\\r\\n\\r\\nSelain metode get dan post, Axios juga menyediakan beberapa metode lain yang dapat digunakan untuk mengirim HTTP request seperti delete, put, dan patch. Kita dapat menggunakan metode-metode tersebut dengan cara yang sama seperti yang telah dijelaskan di atas.\\r\\n\\r\\nUntuk lebih lengkapnya, kita dapat mengacu pada dokumentasi Axios di sini: [https://github.com/axios/axios](https://github.com/axios/axios#readme)\\r\\n\\r\\nSemoga membantu!"},{"id":"selamat-datang","metadata":{"permalink":"/selamat-datang","source":"@site/blog/2022-12-20-001-selamat-datang.mdx","title":"Selamat Datang!","description":"","date":"2021-05-02T10:00:00.000Z","formattedDate":"2 Mei 2021","tags":[{"label":"General","permalink":"/tags/general"}],"readingTime":0.35,"hasTruncateMarker":true,"authors":[{"name":"Irul","title":"JavaScript Enthusiast","url":"https://github.com/fulsep","imageURL":"https://github.com/fulsep.png","key":"irul"}],"frontMatter":{"slug":"selamat-datang","title":"Selamat Datang!","authors":["irul"],"tags":["General"],"date":"2021-05-02T10:00"},"prevItem":{"title":"Axios Untuk Pemula","permalink":"/axios-untuk-pemula"}},"content":"import ImageCenterize from \'../src/components/ImageCenterize.js\';\\r\\n\\r\\n<ImageCenterize src=\\"/img/blog/welcoming.png\\" alt=\\"welcoming\\" />\\r\\n\\r\\nSelamat datang di blog yang baru saja saya buka!\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nSaya pribadi sangat senang bisa berbagi informasi, wawasan, dan ide-ide denganmu melalui platform ini. Saya berharap kamu akan menemukan banyak hal yang bermanfaat dan menyenangkan saat membaca artikel disini.\\r\\n\\r\\nTerima kasih telah berkunjung dan Saya berharap Kamu akan terus mengunjungi website ini di masa yang akan datang.\\r\\n\\r\\nSelamat membaca dan juga belajar!"}]}')}}]);